
<< /AllowTransparency true >> pop% enable transparency
% .5 .setfillconstantalpha % FILL opacity
% .5 .setstrokeconstantalpha  % stroke opacity




/scope{ % dict proc % Runs dict.procName. If dict is StateFul, pushes dict onto dict stack before running;
    2 dict begin
    /_procName exch def
    /_d# exch def

    _procName type /nametype eq not{
        (Error: scope: Second arg not /nametype) =
        quit
    }if

    _d# type /dicttype eq not{
        (Error: scope: First arg not /dicttype) =
        quit
    }if

    _d#  github.com.gnewton.aposkribh.util# /hasState get exec{
        _d# begin _procName load exec end
    }{
        _d# _procName get exec
    }ifelse
    end
}bind def


/github.com.gnewton.aposkribh.util#
<<
    /hasState{
        2 dict begin
        /_d# exch def

        _d# type /dicttype eq not{
            (Error: /hasState: arg is not dict) =
            quit
        }if

        _d# /Metadata known not{
            false % return
        }{
            _d# /Metadata get /_Stateful known not{
                false
            }{
                _d# /Metadata get /_Stateful get % return
            }ifelse % return
        }ifelse
        end
    }
>>def



%%%%%%%%%%%%%% DICT start
/github.com.gnewton.aposkribh.args#
<<
    /Metadata
    <<
        /_DictName (/github.com.gnewton.aposkribh.args#)
        /_Stateful true
    >>

    /argsRegistry#
    <<
        /Metadata
        <<
            /_DictName (/argsRegistry#)
            /_Stateful true
        >>
        % Dictionary of dictionaries, with first key dict key, second key proc key
        /registry#<< >>

        /getArgsInfo{
            10 dict begin
            /procName exch def
            /procDict# exch def

            registry# procDict# known not{
                % Unknown procDict key
                null
            }{
                (Known proc dict key) =
                registry# procDict# get procName known not{
                    % Unknown proc key) =
                    null
                }{
                    registry# procDict# get procName get /inOutArgsTypes known not{
                        % inOutArgsTypes not defined
                        null
                    }{
                        registry# procDict# get procName get /inOutArgsTypes get
                    }ifelse
                    
                    (END KNOWN) =
                }ifelse
            }ifelse

            end
        }bind def
        
        /registerArgs{
            2 dict begin
            /procDict# exch def
            /argsInfo# exch def
            
            argsInfo# ===
            
            /procName argsInfo# /procName get def
            
            % Any d# entries?
            registry# procDict# known not{
                registry# procDict# <<>> put
            }if

            /thisDictReg# registry# procDict# get def
            thisDictReg# ===
            thisDictReg# procName argsInfo# put
            thisDictReg# ===
            (======_ ) =
            registry# ===
            end
        }
    >> def %   /argsRegistry#<<
>>def % github.com.gnewton.aposkribh.args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


/checkArgs{
    10 dict begin
    /procName exch def
    /inOutArgsTypes exch def
    %
    /argsGood false def

    inOutArgsTypes{ % A
        (******************************************************) =
        /args# exch def
        /inArgs args# /in get def
        0 1 inArgs length 1 sub{ %B
            /i exch def
            () =
            i =
            inArgs i get =

            % Check to see if stack size is at least as large as array
            count inArgs length lt{
                (!!!!!!!!!!!) =
                count =
                inArgs length =
                exit
            }if

            (OK) =
            % Walk through stack to see if types match inArgs
            stack
            /allArgsMatch true def
            0 1 inArgs length 1 sub{ % C
                /j exch def
                (JJJ) =
                j =
                j index type =
                inArgs j get  =
                j index type inArgs j get ne{
                   /allArgsMatch false store
                }if
                (===) =
            }for % C
            allArgsMatch{
                /argsGood true store
                exit
            }if
        }for % B

        argsGood{
            exit
        }if
    }forall % A
    
    argsGood
    end
}bind def

/evaluateArgs{
    10 dict begin
    /d# exch def
    d# begin
    inOutArgsTypes procName checkArgs
    end
    end
}bind def

/testArgs{
    <<
        /procName /testArgs
        /inOutArgsTypes [
            << /in [/integertype /floattype]
               /out [/booltype]
            >>
            << /in [/integertype]
               /out [/booltype]
            >>
            << /in [/stringtype /dicttype]
               /out []
            >>
            << /in [/arraytype]
               /out []
            >>
            << /in [/nulltype]
               /out []
            >>
            << /in [/booleantype]
               /out []
            >>
        ]
    >> evaluateArgs
}def


true  testArgs  =

/showInArgs{
    {
        /in get ==
    }forall
}def

/Zbegin{
    4 dict begin
    /argInfo# exch def
    argInfo# evaluateArgs not{
        (Error: Bad args) =
        (Need:) =
        argInfo# /inOutArgsTypes get showInArgs
        stop
    }if

}bind def

/Zend{
    end
}bind def

/simpleProc{
    % int,string in; string out
    <<
        /procName /simpleProc
        /inOutArgsTypes [
            << /in [/integertype /stringtype]
               /out [/stringtype]
            >>
        ]
    >> Zbegin

    10045
    Zend


}def

(SIMPLE PROC) =
(fooo)  43 simpleProc =

/thisDict#
<<
    /simpleProc{
        (This is simpleProc) =
    }
    
    /anotherProc{
        (This is anotherProc) =
    }
>> def

github.com.gnewton.aposkribh.args# begin
<<
    /procName /simpleProc
    /inOutArgsTypes [
        << /in [/integertype /stringtype]
           /out [/stringtype]
        >>
    ]
>> thisDict# argsRegistry# begin registerArgs end


<<
    /procName /anotherProc
    /inOutArgsTypes [
        << /in [/booleantype]
           /out []
        >>
    ]
>> thisDict# argsRegistry# begin registerArgs end

(777) =
thisDict# /anotherProc argsRegistry# /getArgsInfo scope ===
([[[[[[) =
thisDict# /FakeProc argsRegistry# /getArgsInfo  scope ==

% (8888) =
% <<>> /simpleProc argsRegistry# begin getArgsInfo end ==
% (99999) =
% <<>> /simpleProc argsRegistry# /getArgsInfo scope ==
% (77777) =
% <<>> /FakeProc argsRegistry# /getArgsInfo scope ==
end


(hello)=

() =
(Testing hasState) =

(A)=
<<>> github.com.gnewton.aposkribh.util# /hasState scope =
(B)=
github.com.gnewton.aposkribh.args#  github.com.gnewton.aposkribh.util# /hasState scope =
(C)=
github.com.gnewton.aposkribh.args#  github.com.gnewton.aposkribh.util# /hasState scope  =
(D)=
github.com.gnewton.aposkribh.args#  github.com.gnewton.aposkribh.util# /hasState scope =

%github.com.gnewton.aposkribh.args#  github.com.gnewton.aposkribh.util# null scope =


%quit
    

($$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$) =




/mergeArrays{
    8 dict begin

    /y exch def
    y /arraytype (Error: /mergeArrays: Second arg not array) stopIfNotType
    /x exch def
    x /arraytype (Error: /mergeArrays: First arg not array) stopIfNotType

    /z x length y length add array def
    
    z 0 x putinterval
    z x length y putinterval
    
    z
    
    end
} def

/debug false def

/qbegin{
    dict begin
    /_this exch def
    debug{
        (START) =
        _this =
    }if
}bind def

/qend{
    debug{
        _this =
        (END) =
    }if
    end
}bind def

/stopIfNotTypeMessage{
    2 dict begin
    /var exch def
    /errorMsg exch def
    /procName exch def

    () =
    (-----Error------------) =
    procName =
    errorMsg =
    var =
    var type =
    (-----End Error------------) =
    () =
    
    end
}bind def

/stopIfNotType{
    10 dict begin
    /msg exch def
    msg type /stringtype eq not{
        (stopIfNotType) (Third arg is not a string) msg stopIfNotTypeMessage
        quit
    }if
    
    /t exch def
    t type /nametype eq not{
        (stopIfNotType) (Second arg is not a type type) t stopIfNotTypeMessage
        quit
    }if

    /v exch def

     v type t eq not{
         msg =
         v =
         v type =
         stop
     }if
     end
 }bind def

/appendToArray{
    /addToLayer 2 qbegin

    /i exch def
    /a exch def

    a /arraytype (Error: /appendToArray: First arg not array) stopIfNotType
    
    a [i] mergeArrays

    qend
}def

% Num payers allowed
/layers#<<
            /clear{
                initLayers
            }
            
            /initLayers{
                (INIT========================================) =
                /zlayers 32 array def

                /numLayers zlayers length def
                
                0 1 numLayers 1 sub{
                    /i exch def
                    zlayers i 0 array put
                }for
            }
            
            /addToLayers{
                /layerNumber exch def
                {
                    zlayers type pop
                }stopped{
                    $error /errorname get /undefined eq{
                        layers# /initLayers get exec
                    }{
                        (Error) =
                        $error /errorname get =
                        quit
                    }ifelse
                }if

                % Convert proc to string
                cvlit /lambda exch def

                layers# begin
                /layer zlayers layerNumber get def
                /newLayer layer lambda appendToArray def
                zlayers layerNumber newLayer put
                end
            }

            /renderOneLayerPerPage{
                (/renderOneLayerPerPage) =
                1 dict begin
                0 1 numLayers 1 sub{
                    /i exch def
                    zlayers i get length 0 gt{
                        (Layer#) =
                        i =
                        zlayers i get length =
                        zlayers i get  ==
                        () =
                        i renderLayer

                        /Times-Roman findfont 42 scalefont setfont
                        gsave
                        1 .setfillconstantalpha % FILL opacity
                        1 .setstrokeconstantalpha  % stroke opacity
                        newpath
                        0 setgray
                        10 10 moveto
                        i 5 string cvs show
                        grestore
                        showpage
                    }if
                  }for
                end
            }
            
            /renderLayers{
                1 dict begin 
                /layersArray exch def
                layersArray{
                    renderLayer
                }forall
                
                end
            }
            
            /renderLayer{
                1 dict begin
                /layerNumber exch def
                layerNumber /integertype (ERROR: /renderLayer: layerNumber not int) stopIfNotType
                
                /layerArray zlayers layerNumber get def

                layerArray length 0 ne{
                    () =
                    (Render loop) =
                    i =
                    0 1 layerArray length 1 sub{
                        /j exch def
                        j =
                        /lambda layerArray j get def
                        lambda cvx exec
                    }for
                }if
                end
            }
            
            /render{
                0 1 numLayers 1 sub{
                    renderLayer
                  }for
            }
       >>
def


/arrayfor{
    /proc exch def
    /a exch def
    0 1 a length 1 sub {proc} for
    
}def


/run{
    /name exch def
    /d# exch def

    d# name get exec
}bind def




(----------------) =

/bill{
    (bill-55) =
}bind def

/addToLayers{
    layers# /addToLayers run
}def

/circle{
    gsave
    100 0 225 arc
    closepath
    gsave
    fill
    grestore
    0 setgray stroke
    grestore
}def

{1 0 0 setrgbcolor 300 300 circle} 0 addToLayers
{0 1 0 setrgbcolor 400 400 circle} 0 addToLayers
{0 1 1 setrgbcolor 350 350 circle} 0 addToLayers

{.5 .5 .5 setrgbcolor 370 370 circle} 1 addToLayers

{.2 .2 .5 setrgbcolor 170 170 circle} 29 addToLayers

clear

 .5 .setstrokeconstantalpha  % stroke opacity
 .5 .setfillconstantalpha % FILL opacity
 
layers# begin
render
%0 renderLayer
1 renderLayer
%[1 0] renderLayers
 end

 showpage

 .5 .setstrokeconstantalpha  % stroke opacity
 .5 .setfillconstantalpha % FILL opacity

 layers# begin
% clear
 renderOneLayerPerPage
 end

(YYYYYYYYYYYYYYYYYYYYYYYY) =

 
44 /integertype (Fail) stopIfNotType
 
 quit

[1 2 3] [5] mergeArrays ==
[1 2 3] 4 appendToArray ==
[1 2 3] 54.0 appendToArray ==
[1 2 3] null appendToArray ==
[1 2 3] (foo)  appendToArray ==
[1 2 3] false  appendToArray ==
[1 2 3] <</m false>>  appendToArray ==
[] <</m false>>  appendToArray ==
/bb [] (/foo 100 def  foo =)  appendToArray def

bb 0 get ==
bb 0 get cvx exec
bb 0 get cvx cvlit =
(888) =
%3 <</m false>>  appendToArray ==


quit


/args{
    /argsarray exch def/B

}bind def






