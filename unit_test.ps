(base.ps) run
(unit_test.ps) _aposkribh_fileStart

(unit.ps) run



%<<
/simpleDict# 100 dict def
simpleDict# begin

/addd{
    % Takes 2 numbers on stack, adds them, but leaves the second number (top on stack) on stack _after_ add results
    % 10 11 add --> 21 11
    dup
    /tmp exch def
    add
    tmp
    exch
}def

end % simpleDict# 


%simpleDict# begin
github.com.gnewton.aposkribh.unit# begin

% Test /addd
/t43<<
    /TestName (Addd 2 numbers: pass)
    /InArgs[10 11]
    /OutArgs[21]
    /Expected ExpectError
    /Proc /addd
    /Dict simpleDict#
>>def

[[10 11] [21 11] ExpectError  (Addd 2 numbers: pass)] /addd simpleDict# testRunner % OK, so PASS
[[10 11] [21 11] ExpectSuccess  (Addd 2 numbers: pass)] /addd simpleDict# testRunner % OK, so PASS
[[10 11] [21 1 1] ExpectSuccess  (Too many results: fail exoected)] /addd simpleDict# testRunner % error, so not PASS
[[10 11] [21 11 222] ExpectError  (Addd 2 numbers: wrong number of results; pass)] /addd simpleDict# testRunner % OK, so PASS
[[10 11] [22 11] ExpectError  (Addd 2 numbers: wrong result: pass)] /addd simpleDict# testRunner % Error expected, so PASS
[[10 11] [21 1 1] ExpectError  (0000 Too many results: pass)] /maddd simpleDict# testRunner % Test setup error: /maddd does not exist in simpleDict#
[[10 11] [21 1 1] ExpectError  (0000 Too many results: pass)] /addd simpleDict# testRunner % should FAIL, so ok

%t43 ===

%t43 validTestDict =

() =
() =

(------------------------------------->>>>>) =
t43 validTestDict2 =

(&&&&&&&&&&&&&&&&) =
%end % /simpleDict1# 
%%%%%%%%%%%

end % github.com.gnewton.aposkribh.unit#
%%%%%%%%%%%





(unit_test.ps) _aposkribh_fileEnd
