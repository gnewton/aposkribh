(base.ps) run

(tmp.ps) _aposkribh_fileStart

(util.ps) run

(simple.ps) run

(aposkribh.ps) run

github.com.gnewton.aposkribh.util begin
github.com.gnewton.aposkribh.simple# begin
github.com.gnewton.aposkribh begin



% github.com.gnewton.aposkribh{
%     /tests exch def % pop off proc definition
%     (MMMMMMM) =
%     tests 0 get =
%     tests 1 get =
%     = % print key (proc name)
% }forall

/concatStrings{
    github.com.gnewton.aposkribh.base.internal /_concatstrings get exec
}def

(foo) (bar) github.com.gnewton.aposkribh.base.internal /_concatstrings get exec =

(bbbb) (  aaa) concatStrings =

systemdict /github.com.gnewton.aposkribh get =

end % github.com.gnewton.aposkribh begin
end % github.com.gnewton.aposkribh.simple begin
end % github.com.gnewton.aposkribh.util begin

() =
() =
() =

(Testing idea) =

/Foo# 100 dict def
Foo# begin
/moo{
    (moo) =
}def

/value 0 def

/printValue{
    (printValue) =
    (Value=) =
    value =
}def

/addd{
    /value 121 def
    add
}def

end % Foo#
() =
() =

/dispatch{ %proc dict
    2 dict begin
    /d exch def
    github.com.gnewton.aposkribh.util begin
    d isDict? not{
        (/dispatch: not a dictionary)=
        stop
    }if
    end
    
    /p exch def

    % p found in d?
    d p known not{
        (/dispatch: proc not in dictionary)=
        d ===
        p =
        stop
    }if
    d begin
    d p get exec
    end % d
    end % local
}def

/FooCopy# 100 dict def

Foo# FooCopy# copy

/moo Foo# dispatch

%10 23 /addd Foo# dispatch =
/printValue Foo# dispatch
(--)=
(/addd FooCopy# Should be 33)=
 10 23 /addd FooCopy# dispatch ===
 (FooCopy value =) =
 /printValue FooCopy# dispatch
 (Foo value =) =
 /printValue Foo# dispatch 

(End) =


/AppendArray# 10 dict def

AppendArray# begin
/MaxArraySize 16777216 def

/size 20 def
/index 0 def
/a size array def

/print{
    index =
    a ==
}def

/new2{
    1 dict begin
    /destDict# exch def
    AppendArray# begin
    AppendArray# destDict# copy
    destDict# begin
    /a size array def
    end % destDict#
    end % AppendArray#
    end
}def

/new{
    1 dict begin
    /newAppendArray# 100 dict def
    AppendArray# begin
    AppendArray# newAppendArray# copy
    newAppendArray# begin
    /a size array def
    end % newAppendArray#
    end % AppendArray#
    end
}def


/append{ %item ba
    /l a length def
    index l eq{
        expand 
        (---------) =
    }if
    %%
    (Ml;okj)=
    a ===
    (Ml;okjooooo)=
    10 dict begin
    /item exch def
        
    {
        a index item put
    }stopped{
        (STOPPED) =
        (Index=) =
        index =
        (Length=) =
        a length =
        quit
    }if

    end % local dict

    % Needs to be outside of local dict
    /index index 1 add def
}def

/expand{
    /l a length def

    l 2 mul MaxArraySize gt{
        /newa MaxArraySize array def
    }{
        /newa l 2 mul array def
    }ifelse
    newa 0 a putinterval
    /a newa def
}def

end % AppendArray#


(************************) =
/ACopy2# /new AppendArray# dispatch def

(mmmmmmmm)=
/print ACopy2# dispatch

(777) /append ACopy2# dispatch
(hello) /append ACopy2# dispatch
(world) /append ACopy2# dispatch
876     /append ACopy2# dispatch
/print ACopy2# dispatch

(/print AppendArray# dispatch)=
/print AppendArray# dispatch
(00000000000000000) =
/print ACopy2# dispatch

0 1 25{
    /i exch def
    i =
    i /append ACopy2# dispatch
}for


/printDict{
    ACopy2#
    (<< ) =
    {
        /v exch def
        /k exch def
        
        % github.com.gnewton.aposkribh.util begin
        % github.com.gnewton.aposkribh.simple# begin
        % k type /nametype ne{
        %     ($$$$$$$$$$$$$$$$$$$$$$$$$$) =
        %     stop
        % }if
        % end
        % end
        (KEY: ) k 128 string cvs concatstrings =
        ACopy2# k get  ==
    }forall
    (>>) =
}def

%/ACopy2# /foonew AppendArray# dispatch def
(-------------) =
ACopy2# printDict
%ACopy2# ===

(tmp.ps) _aposkribh_fileEnd




