%!PS-Adobe-2.0 EPSF-1.2
%%Title:
%%Creator:Glen Newtopn

/iget{  %false d# /Value
    /.key exch def
    /.ddict# exch def

    .ddict# .key known{
        pop
        .ddict# .key get
    }if
}bind def

/dot{
    1 dict begin
    /size exch def
    gsave
    translate
    newpath
    0 0 size 0 360 arc closepath fill
    grestore
    end
}bind def

/PathFiller{
    5 dict begin
    (/PathFiller START) =
    /fillerArgs# exch def

    gsave
   
    clip

    fillerArgs# /TranslateToCentreOfMass known{
	fillerArgs# /TranslateToCentreOfMass get{

	}if

    }if

    fillerArgs# ===
    fillerArgs# /FillerProcArgs known{
	fillerArgs# /FillerProcArgs get /Rotate known{
            fillerArgs# /Rotate get rotate
	}if
    }if

    fillerArgs# /AlphaStroke known{
        fillerArgs# /AlphaStroke get   .setstrokeconstantalpha
    }if

    fillerArgs# /AlphaFill known{
        fillerArgs# /AlphaFill get   .setfillconstantalpha
    }if

    fillerArgs# /FillerProc get exec
    grestore
    end
    (/PathFiller END) =
}bind def

/testShape{
    newpath
    100 100 moveto
    200 10 rlineto
    10 200 rlineto
    -30 0 rlineto
    -50 10 rlineto
    closepath
}def


/StripesFillerProc{

    pathbbox
    /y1 exch cvi def
    /x1 exch cvi def
    /y0 exch cvi def
    /x0 exch cvi def

    gsave

    1 0 0 setrgbcolor
    newpath
    x0 y0 moveto
    x1 y1 lineto
    stroke
    grestore

    fillerArgs# /FillerProcArgs get /LineWidth get setlinewidth
    fillerArgs# /FillerProcArgs get /Color get exec setrgbcolor

    
    x0 fillerArgs# /FillerProcArgs get /StepSize get  x1{
        /x exch def
         newpath
         x y0 moveto
         x y1 lineto
         stroke
    }for

}def


testShape
<<
    /TranslateToCentreOfMass false
    /Rotate 15
    /AlphaStroke .4
    /FillerProc {
        StripesFillerProc
    }
    /FillerProcArgs
    <<
        /StepSize 7
        /LineWidth 3
        /Color {0 0 1}
    >>
>>PathFiller

testShape
stroke
showpage

testShape
<<
    /TranslateToCentreOfMass false
    /Rotate 0
    /AlphaStroke .4
    
    /FillerProc {
        StripesFillerProc
    }
    /FillerProcArgs
    <<
        /StepSize 7
        /LineWidth 3
        /Color {0 1 0}
    >>
>>
PathFiller

showpage
%%%%%%%%%%%%%%%%%%%%%%%%


/polygonArea{ % path
    /area 0.0 def
    
    /prevx null def
    /prevy null def
    {% moveto
	/y exch def
	/x exch def
	/prevx x store
	/prevy y store
    }
    {% lineto
	/y exch def
	/x exch def
	/area area   prevx y mul  x prevy mul sub  add store
	/prevx x store
	/prevy y store
    }
    {% curveto
	6{=}repeat
    }
    {% closepath
	
    }
     pathforall
     (SSSS) =
     area 2 div =
}bind def

/PathRender{
    (/PathRender START) =
    5 dict begin
    /renderArgs# exch def

    /n 1 renderArgs# /Repeat iget def
    /beforeLoop { (BeforeLoop) =} renderArgs# /BeforeLoop iget def
    /afterLoop  {(AfterLoop) = } renderArgs# /AfterLoop iget def

    /beforeIter { } renderArgs# /BeforeIter iget def
    /afterIter  { } renderArgs# /AfterIter iget def

    beforeLoop 

    n {
        gsave
        beforeIter
        
        %pathProc
        
        renderArgs# /movetoProc get
        renderArgs# /linetoProc get
        renderArgs# /curvetoProc get
        renderArgs# /closeProc  get
        pathforall
        afterIter
        grestore

    }repeat

    afterLoop
    end

    (/PathRender END) =
}bind def

showpage



/pathrenderer.Jiggle
<<
    /BeforeLoop{
        /movetoRandom renderArgs# /MovetoRandom  get def
    }
    /MovetoRandom 500
    /Repeat 50
    /BeforeLoop {

    }

    /AfterIter {
        stroke
    }
    /BeforeIter {
        .1 .setstrokeconstantalpha
        %4 setlinewidth
        rand 7 mod setlinewidth

        rand 100 mod 100.0 div
        rand 100 mod 100.0 div
        rand 100 mod 100.0 div
        setrgbcolor
    }
    /movetoProc
    {
        newpath
        /y exch def
        /x exch def
        x  rand movetoRandom mod add
        y  rand movetoRandom mod add 
        moveto
    }

    /linetoProc
    {
        /y exch def
        /x exch def
        x rand movetoRandom mod add
        y rand movetoRandom mod add
        lineto
    }    

    /curvetoProc
    {
        /y3 exch def
        /x3 exch def
        /y2 exch def
        /x2 exch def
        /y1 exch def
        /x1 exch def
        x1  rand movetoRandom mod add
        y1  rand movetoRandom mod add 
        x2  rand movetoRandom mod add
        y2  rand movetoRandom mod add 
        x3  rand movetoRandom mod add
        y3  rand movetoRandom mod add 
        curveto
    }
    /closeProc
    {
        closepath
    }
>> def


testShape
pathrenderer.Jiggle
PathRender

showpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/randomShapes{
    /d 30 def
    /d2 d 2 div def
    10 10 moveto

    30{
        rand d mod d2 sub
        rand d mod d2 sub
        rlineto
    }repeat

}bind def

randomShapes
pathrenderer.Jiggle
PathRender

showpage

<<
    /FillerProc {
	randomShapes
	pathrenderer.Jiggle
	PathRender
    }
    /FillerArg1 (MMM)
>>
testShape



PathFiller

showpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%NEWEST

/FooFillerProc{

    pathbbox
    /y1 exch cvi def
    /x1 exch cvi def
    /y0 exch cvi def
    /x0 exch cvi def




    fillerArgs# /FillerProcArgs get /LineWidth get setlinewidth
    fillerArgs# /FillerProcArgs get /Color get exec setrgbcolor

    gsave
    x0 fillerArgs# /FillerProcArgs get /StepSize get  x1{
        /x exch def
         newpath
         x y0 moveto
         x y1 lineto
         stroke
    }for
    grestore

    gsave
    polygonArea
    grestore
    
    gsave
    1 0 0 setrgbcolor
    x0 y0 20 dot
    x1 y1 20 dot
    x0 x1 x0 sub 2 div add    y0 y1 y0 sub 2 div add   10 dot
    grestore

}def


testShape
<<
    /TranslateToCentreOfMass false
    /Rotate 15
    /AlphaStroke .4
    /FillerProc {
        FooFillerProc
    }
    /FillerProcArgs
    <<
        /StepSize 7
        /LineWidth 3
        /Color {0 0 1}
    >>
>>PathFiller
showpage
