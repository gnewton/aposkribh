%% This filename
/github_com_gnewton_aposkribh__FILENAME (library.ps) def
%%

(globals.ps) run
% Reset
/github_com_gnewton_aposkribh__FILENAME (library.ps) def

%[(util.ps)] aposkribh_Files_Load
% Reset/github_com_gnewton_aposkribh__FILENAME (library.ps) def


/github_com_gnewton_aposkribh_Library# 50 dict def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
github_com_gnewton_aposkribh_Library# begin
%(github_com_gnewton_aposkribh_Library) github_com_gnewton_aposkribh_util_loading_start

/LibName /github_com_gnewton_aposkribh_Library#  def



/newLibrary{
%    /_libName null def
    2 dict begin
    /_libName exch def
    
    <<
        /LibName _libName
        /Docs# emptyDict 
        /Test# emptyDict
        /Params# emptyDict
        /Code# emptyDict
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        /lrun{
            (lrun START) debug
        
            /_dict# currentdict def
            
            2 dict begin
            0 index type /dicttype eq{
                /_dict# exch def
            }if
            
            /_proc exch def

            %( lrun starting proc: ) _proc concatstrings debug
            ( lrun starting proc: ) debug
            % Run procedure
            /libName  _dict# /LibName get length string def
            /procName _proc length string def
            _dict# /LibName get libName cvs
            _proc procName cvs
            [(lrun: execing: ) libName (:) procName] concatstrings debug
            
            % Exec proc
            {
                _dict# /Code# get _proc get exec
            }
            stopped{
                (ERROR) debug
                (A)=
                $error begin
                (newerror)=
                newerror =
                (B)=
                (errorname=)=
                errorname =
                % (C)=
                % (command=)=
                % command =
                ()=
                % (D)=
                % (command type=) =
                % command type =
                (E)=
                (errorinfo=) =
                errorinfo ===
                (F)=
                (ostack=) =
                ostack ===
                (G)=
                (estack=)=
                estack ===

                (G)=
                (dstack)=
                dstack ==
                dstack {
                    /dd exch def
                    dd =
                    %0 1 dstack length 1 sub{
                    dd /LibName where{
                        dd eq{
                            (true)=
                            dd /LibName get =
                        }if
                    }{
                        (false) =
                    }ifelse
                }forall
                
                (End $error) =
                end
                quit
            }{
                (DONE) debug
            }ifelse
            end
        }bind def

        /procAdd{ % key proc
            5 dict begin
            /_proc exch def
            
            /_key exch def
            /_library# exch def
            _library# begin
            _library# /Code# get
            _key /_proc load put
            end
            end
        }

    >>
    end
}bind def
%(github_com_gnewton_aposkribh_Library#) github_com_gnewton_aposkribh_util_loading_end


end % 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



