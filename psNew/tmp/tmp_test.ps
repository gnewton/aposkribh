

/printDictKeys{
    (<<) =
    {
        type /v exch dup length string cvs def

        /k exch def
        k type /booleantype eq {
            (    /) k 10 string cvs (: /) concatstrings v concatstrings concatstrings =

        }{
            (    /) k dup length string cvs (: /) concatstrings v concatstrings concatstrings =
        }ifelse
    }forall
    (>>) =
}bind def

/printDictKeys2{
    2 dict begin
    /s (  ) def

    1 add /depth  exch def

    depth 3 eq{
        pop
    }{

        (<<) =
        {
            dup /V exch def
            type /v exch dup length string cvs def

            /k exch def
            k type /booleantype eq {
                /s s k 10 string cvs (: /) concatstrings v concatstrings concatstrings  store

            }{
                /s s  k dup length string cvs concatstrings (: /)  concatstrings v  concatstrings   store
            }ifelse

            v (dicttype) eq{
                V depth 1 add printDictKeys2
            }if

            s length 120 gt{
                s =
                /s (  ) store
            }{
                /s s (    --    ) concatstrings store
            }ifelse
            
        }forall
        (>>) =
        end
    }ifelse
}bind def

/Now#  <<>> def



Now# begin

/CC{
    currentdict Now# eq not{
        (NOOOOOOOOOOOO) =
        quit
    }{
        currentdict  0 printDictKeys2
    }ifelse
}def

Now# printDictKeys




CC

(tmp_test.ps START) =
CC
(tmp_test.ps) [ (primatives.ps) (assert.ps) (globals.ps) (library.ps)] (init.ps) run
(------------------------) =
CC




/d#  (d#-lib) aposkribh.library# begin newLibrary end def


currentdict Now# eq not{
    (NOOOOOOOOOOOO) =
}if

% d# begin

% /fooProc{
%     2 add =
%     (CONTENTS - /fooProc) =
% }def2

% 12 fooProc

% end

end

quit
end



% newpath
% 100 100 moveto
% 200 200 rlineto

% 0 setlinewidth
% 199.1 199 instroke =

% serialnumber =
% revision =
% product =
% languagelevel =

% end % d end
% % d# begin
% % /m aposkribh.library#  /newLibrary get def

% % m (age) 32 put
% % m ===

% % m m eq =

% % /mm aposkribh.library#  /newLibrary get def





