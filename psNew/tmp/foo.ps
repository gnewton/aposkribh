(init_utils.ps) run

/stuff<<

          /b2s[
              <<
                  /args [/m  /booleantype /arraytype] 
                  /results [ /stringtype ]
              >>

              <<
                  /args [/integertype /integertype] 
                  /results [ /stringtype ]
              >>

              <<
                  /args [/integertype /integertype /integertype] 
                  /results [ /booleantype ]
              >>
          ]
          
      >> def






/argsMatch{ %procs-args-dict# procKey --> true array of possible results | false
    count 2 lt{
        (/argsMatch: Needs 2 args, dict procKey) /stackunderflow signalerror
    }if

    0 index type /nametype ne{
        (/argsMatch: 1st arg must be /nametype, proc name) /typecheck signalerror
    }if

    1 index type /dicttype ne{
        (/argsMatch: 2nd arg must be /dicttype) /typecheck signalerror
    }if

    %%%%
    2 dict begin
    
    /possibleResults [] def
    
    /_procKey exch def
    /_d exch def

    /match false def

    
    _d _procKey known not{
        (/argsMatch: procKey not found: ) _procKey dup length string cvs concatstrings  /undefined signalerror
    }if

    _d _procKey get{ % Each arg/results pairs for this proc
        /resArgs# exch def


        resArgs# /args known not{
            (/argsMatch: /args not found in: ) _procKey dup length string cvs concatstrings  /undefined signalerror
        }if
        /largs resArgs# /args get def

        resArgs# /results known not{
            (/argsMatch: /results not found in: ) _procKey dup length string cvs concatstrings  /undefined signalerror
        }if
        /lresults resArgs# /results get def

        /allMatch true def

        count largs length lt{
            /allMatch false store % Not enought args on stack
        }{
            0 1 largs length 1 sub{ % Walk through arg array and stack args
                /i exch def
                i index type largs i get  ne{
                    /allMatch false store
                }if
            }for

            allMatch{ % Add results to results array
                /match true store % At least one matches
                /possibleResults possibleResults lresults aposkribh.append store 
            }if
        }ifelse
    }forall

    match{
        possibleResults
        true
    }{
        false
    }ifelse
    end
}bind def


3 1 2 stuff /b2s argsMatch %true array of possible results | false
{
    (TRUE) =
    ===
}{
    (FALSE) =
}ifelse

