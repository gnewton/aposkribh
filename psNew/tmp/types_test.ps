

(types_test.ps) [(assert.ps) (types.ps) (primatives.ps) (test.ps)] (init.ps) run
(types_test.ps) [(aposkribh.assert#) (aposkribh.primatives#) (aposkribh.types#) (aposkribh.test#)] beginx
[
    ( 43 isNumberType assertTrue)
    ( 43.5 isNumberType assertTrue)
    ( 0 isNumberType assertTrue)

    ( [()] /stringarraytype  isType assertTrue)
    ( 22 /integertype isType  assertTrue) 
    ( 2.5 /numbertype isType   assertTrue)
    ( [22] /numberarraytype isType   assertTrue)
    ( [(m) ] /stringarraytype isType assertTrue)

    ( [(2.5)] /stringarraytype  isType  assertTrue)
    ( [() (22.5) (foo)] /stringarraytype isType   assertTrue)

]runPositiveTests

 

 ( <<>> isNumberType ) test.F
 ( [] isNumberType ) test.F
 ( [(m) (foo)] isNumberType ) test.F
 ( [(m)] isNumberType ) test.F
 ( [2 (m)] isNumberType ) test.F
 ( [2 43.5] isNumberType ) test.F
 ( [2] isNumberType ) test.F
 ( null isNumberType ) test.F
 ( true isNumberType ) test.F
 ( {} isNumberType ) test.F
 ( (m) isNumberType ) test.F


% { (m) isNumberArrayType } test.F
% { 2.5 isNumberArrayType } test.F
% { 22 isNumberArrayType} test.F
% { <<>> isNumberArrayType } test.F
% { [(m) (foo)] isNumberArrayType } test.F
% { [(m)] isNumberArrayType } test.F
% { [2 (m)] isNumberArrayType } test.F

% { null isNumberArrayType } test.F
% { true isNumberArrayType } test.F
% { {} isNumberArrayType } test.F



% { [22 ] isStringArrayType } test.F



% mark (/************************* )                     strcatmark /typecheck signalerror
% (----) =






% %
% { [22.5] /stringarraytype  isType}            test.F
% { [() 22.5 (foo)] /stringarraytype    isType} test.F
% { [32 () (foo) ] /stringarraytype  isType}    test.F
% %
% { /stringarraytype  isType}  /stackunderflow  test.E



% %
% { 33 isNumberArrayType}          test.F
% %
% { isNumberArrayType} /stackunderflow  test.E



  ( 3 2 add  12 12 add ) [24 5 ] test.V
 ( 3 2  add  12 12 add) [24 5 ] test.V
 %
 { (k) 2  add  } /typecheck test.E


end % #aposkribh.test#
end % aposkribh.types#
end % aposkribh.primatives# 
end  % aposkribh_test#
