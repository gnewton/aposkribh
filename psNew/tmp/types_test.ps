(assert.ps) run
(types.ps) run
(primatives.ps) run

(test.ps) run

aposkribh.assert# begin
aposkribh.primatives# begin
aposkribh.types# begin
aposkribh.test#  begin





% { (m) isNumberType } test.F
% { 2.5 isNumberType } test.T
% { 22 isNumberType} test.T
% { <<>> isNumberType } test.F
% { [] isNumberType } test.F
% { [(m) (foo)] isNumberType } test.F
% { [(m)] isNumberType } test.F
% { [2 (m)] isNumberType } test.F
% { [2 43.5] isNumberType } test.F
% { [2] isNumberType } test.F
% { null isNumberType } test.F
% { true isNumberType } test.F
% { {} isNumberType } test.F

% { [] isNumberArrayType } test.T
% { (m) isNumberArrayType } test.F
% { 2.5 isNumberArrayType } test.F
% { 22 isNumberArrayType} test.F
% { <<>> isNumberArrayType } test.F
% { [(m) (foo)] isNumberArrayType } test.F
% { [(m)] isNumberArrayType } test.F
% { [2 (m)] isNumberArrayType } test.F
% { [2 43.5] isNumberArrayType } test.T
% { [2] isNumberArrayType } test.T
% { null isNumberArrayType } test.F
% { true isNumberArrayType } test.F
% { {} isNumberArrayType } test.F


% { [(m) ] isStringArrayType } test.T
% { [22 ] isStringArrayType } test.F



% mark (/************************* )                     strcatmark /typecheck signalerror
% (----) =
% 22 /integertype isType =
% 2.5 /numbertype isType =
% [22] /numberarraytype isType =
% [(m) ] /stringarraytype isType =
% [22 ] /stringarraytype isType =



% 22 /integertype  isType =
% 22 /numbertype  isType =
% (22) /numbertype  isType =



% { 22 /numbertype  isType}             test.T
% { [22.5] /numberarraytype  isType}    test.T
% { [22.5 44] /numberarraytype  isType} test.T
% { [(2.5)] /stringarraytype  isType}   test.T
% { [()] /stringarraytype  isType}      test.T
% { [ () (foo) ] /stringarraytype  isType}  test.T
% { [() () (foo)] /stringarraytype  isType} test.T
% { [() (22.5) (foo)] /stringarraytype  isType} test.T
% %
% { [22.5] /stringarraytype  isType}            test.F
% { [() 22.5 (foo)] /stringarraytype    isType} test.F
% { [32 () (foo) ] /stringarraytype  isType}    test.F
% %
% { /stringarraytype  isType}  /stackunderflow  test.E


% { [] isNumberArrayType   }       test.T
% { [32] isNumberArrayType }       test.T
% { [22 32 0.0] isNumberArrayType} test.T
% %
% { 33 isNumberArrayType}          test.F
% %
% { isNumberArrayType} /stackunderflow  test.E



% { 3 2 add  12 12 add } [24 5 ] test.V
% { 3 2  add  12 12 add} [24 5 ] test.V
% %
% { (k) 2  add  } /typecheck test.E


end % #aposkribh.test#
end % aposkribh.types#
end % aposkribh.primatives# 
end  % aposkribh_test#
