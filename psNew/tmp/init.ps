%(ZZZ init.ps START) =

/aposkribh.libraryLoader_VERBOSE where not{
    /aposkribh.libraryLoader_VERBOSE true def
}{
    pop % throw away the found dict
}ifelse



% All files start with this %%%%%%%%%
% filename on stack
/aposkribh.PSFile where not{
    /aposkribh.PSFile 1 array def
    2 dict begin
    /filename exch def
    aposkribh.PSFile 0 filename put
    end
}{
    pop % throw away the found dict

    % Add this filename to the array
    2 dict begin
    /filename exch def
    /aposkribh.PSFile aposkribh.PSFile filename aposkribh.append store
    end
}ifelse




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/aposkribh.cat{ % array[strings] -> string
    count 0 eq{
        (/cat: Needs 1 arg: array[strings]) /stackunderflow signalerror
    }def
    0 index type /arraytype ne{
        (/cat: Arg not /arraytype) /typecheck
    }if
    %%%
    1 dict begin
    
    /_a exch def
    /delim ( - ) def
    /$s () def

    0 1 _a length 1 sub{
        /i exch def
        i 0 ne{
            /$s $s delim concatstrings store
        }if
        /$s $s _a i get concatstrings store
    }for

    $s
    end

}bind def

/aposkribh.unappend{ % array -> array with last element removed
    count 0 eq{
        (/unappend: Needs 1 arg: array) /stackunderflow signalerror
    }def
    0 index type /arraytype ne{
        (/unappend: Arg not /arraytype) /typecheck
    }if
    %
    1 dict begin
    /_a exch def

    _a length 0 eq{
        _a % Return empty []
    }{
        /$newArray _a length 1 sub array def

        0 1 _a length 2 sub{
            /i exch def
            $newArray i _a i get  put
        }for

        $newArray
    }ifelse
    
    end

}bind def



/aposkribh.append{ % value array -> array with value added to end
    count 2 lt{
        (/append: Needs 2 args, any, array) /stackunderflow signalerror
    }def
    1 index type /arraytype ne{
        (/append: 2nd arg not /arraytype) /typecheck
    }if
    %%%
    
    2 dict begin
    /_v exch def
    /_a exch def
        
    /$newArray _a length 1 add array def

    0 1 _a length 1 sub{
        /i exch def
        $newArray i _a i get  put
    }for

    $newArray _a length _v put

    $newArray
    end
}bind def


/aposkribh.PSFile,LOG{

}bind def

/aposkribh.PSFile.END{
    aposkribh.libraryLoader_VERBOSE{
        aposkribh.PSFile aposkribh.cat ( --END) concatstrings =
        /aposkribh.PSFile aposkribh.PSFile aposkribh.unappend store

        aposkribh.PSFile length 0 eq{
            () =
        }if
    }if
}bind def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is run



aposkribh.libraryLoader_VERBOSE{
    aposkribh.PSFile aposkribh.cat ( START) concatstrings =
}if



%( ZZZ init.ps END) =
