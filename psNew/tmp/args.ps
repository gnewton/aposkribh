(args.ps) [(globals.ps)] (init.ps) run

/aposkribh.args# 
(args.ps)
{
        /aposkribh.args# 50 dict def

        aposkribh.args# begin

        /__ArgsTemplate# 10 dict def


        __ArgsTemplate# begin
        
        /Args#<<>> def % where ArgType info goes

        
        /addArgsDict{ % dict; Adds entire dict; overwrites existing one
            count 0 eq{
                (/aposkribh.args#/addArgs: Needs one arg, /dicttype) /stackunderflow signalerror
            }if
            
            0 index type /dicttype ne{
                (/aposkribh.args#/addArgs: Arg0 not /dicttype) /typecheck signalerror
            }if
            %
            Args# copy pop
        } def % /addArgs
        
        end % __ArgsTemplate# begin

        

        /newArgDict{
            1 dict begin 
            /newDict# 10 dict def
            __ArgsTemplate# newDict#  copy
            end
        }bind def

        /argsAssertLibHasProcDict{
            count 2 lt{
                (/aposkribh.args#//assertLibHasProc: Needs 2 args, /dicttype) /stackunderflow signalerror
            }if
            
            0 index type /nametype ne{
                (/aposkribh.args#//assertLibHasProc: Arg0 not /nametype) /typecheck signalerror
            }if
            1 index type /dicttype ne{
                (/aposkribh.args#//assertLibHasProc: Arg1 not /dicttype) /typecheck signalerror
            }if
            %
            /procName exch def
            /procDict# exch def

            procDict# /__ArgsTypes# known not{
                (/assertLibHasProcDict procDict/__ArgsTypes# does not exist:  ) procName dup length string cvs concatstrings /undefined signalerror 
            }if

            procDict# /__ArgsTypes# get  /Args# known not{
                (/assertLibHasProcDict procDict/__ArgsTypes#/__ArgsTypes# does not exist:  ) procName dup length string cvs concatstrings /undefined signalerror 
            }if

            procDict# procName known not{
                (/assertLibHasProcDict: Procedure does not exist in dict: ) procName dup length string cvs concatstrings /undefined signalerror 
            }if

        }bind def
        
        
        /assertValidateLibrary{
            count 0 eq{
                (/aposkribh.args#/validateLibrary: Needs one arg, /dicttype) /stackunderflow signalerror
            }if
            
            0 index type /dicttype ne{
                (/aposkribh.args#/validateLibrary: Arg0 not /dicttype) /typecheck signalerror
            }if
            2 dict begin
            /_lib# exch def


            _lib# /__ArgsTypes# known not{
                (validateLibrary: livrary/dictionary missing /__ArgsTypes# key ) /undefined signalerror
            }if

            _lib# /__ArgsTypes# get /Args# known not{
                (validateLibrary: livrary/dictionary missing /__ArgsTypes#/Args#  key ) /undefined signalerror
            }if
            end
        }bind def

        /argsValidateLibrary{
            count 0 eq{
                (/argsValidateLibrary: Empty stack) /stackunderflow signalerror
            }if

            0 index type /dicttype ne{
                (/argsValidateLibrary: First arg not /dicttype) /typecheck signalerror
            }if
            %%

            /_lib exch def

            _lib{
                dup type /arraytype eq{
                    dup xcheck ===
                }if
                /proc exch def
                
                /key exch def
                key ===
                /proc ===
                () =
            }forall

            %(/argsValidateLibrary: NOT IMPLEMENTED) /invalidexit signalerror
            
        }bind def



        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        end % aposkribh.args# 
}aposkribh.libraryLoader

aposkribh.PSFile.END
