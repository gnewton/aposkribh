/checkArgs{ % true | false errorMessage
    count 2 lt{
        (ERROR: /checkArgs: Needs 2 args) false
    }{
        2 dict begin

        0 index type /arraytype ne{
            (ERROR: /checkArgs: 0 stack not /arraytype) false
        }{

            1 index type /stringtype ne{
                (ERROR: /checkArgs: 1 stack not /stringtype) false
            }{

                % end args

                2 dict begin
                /_argsArray exch def
                /_procName exch def

                0 1 _argsArray length 1 sub{
                    /i exch def
                    _argsArray i get i index type ne{
                        (ERROR) =
                        quit
                    }if
                }for
                end
                true
            }ifelse
        }ifelse
    }ifelse
}def



/strcat{ % string0 string1 separator_string OR [s1 s2 s3] separator_string
    2 dict begin
    /_sep exch def
    % array of N strings on stack
    0 index type /arraytype eq{
        2 dict begin
        /_a exch def
        /str () def
        /first true def
        0 1 _a length 1 sub{
            /i exch def
            /s _a i get def

             first{
                 /first false store
             }{
                 /str str _sep concatstrings store
             }ifelse

             /str str s concatstrings store
        }for
        str
        end
    }{
        % 2 strings on stack
        count 2 lt{
            (Error: base.ps: concatstrings: needs two args) =
            quit
        }if
        0 1 1{
            /i exch def
            i index type /stringtype ne{
                (Error: globals.ps/concatstrings) =
                i =
                (stack not string) =
                i index =
                quit
            }if
        }for
        % End Args
        %%%%%%%%%
        
        exch dup length    
        2 index length add string    
        dup dup 4 2 roll copy length
        4 -1 roll putinterval
    }ifelse
    end
}bind def

/spaces{
    2 dict begin
    /_n exch def
    /str () def
    0 1 _n{
        pop
        /str str ( ) () concatstrings store
    }for
    str
    end
}bind def
