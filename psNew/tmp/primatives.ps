
(globals.ps) run

/aposkribh.primatives# where not{

    /aposkribh.primatives# 50 dict def

    aposkribh.primatives# begin

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /strcatmark{ % mark (s1) (s2)...(sn) -> (s1s2....sn)
        {
            counttomark
        }stopped{
            % No mark
            (/verbose2: Missing 'mark') /unmatchedmark signalerror
        }if
        pop %
        
        2 dict begin
        
        /$str () def
        0 1 counttomark 3 sub {
            index $str concatstrings /$str exch store
        }for
        cleartomark
        $str 
        end
    }bind def

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /verbose2{ % mark (s0) (s1) ..(sn) --> (s0s1..sn) =
        aposkribh.VERBOSE{
            strcatmark =
        }{
            cleartomark
        }ifelse
    }bind def

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /stack2array{
        [/integertype] (/stack2array) checkArgs

         %%%
         2 dict begin
         /_n exch def
         
         count _n lt{
             (/stack2Array: Needs at n args in stack) /stackunderflow signalerror
         }if
         
         /$a _n array def
         0 1 _n 1 sub{
             /i exch def
             $a i  0 index put
             pop
         }for
         end
         (--------mmmmmmm) =
         %%%
    }bind def
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /r2s{
        [/realtype] (r2s) checkArgs
        24 string cvs
    }bind def


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /n2s{ % /nametype to string /nametype --> (nametype)
        [/nametype] (n2s) checkArgs

        dup length string cvs
    }bind def


    /b2s{ % /nametype to string /nametype --> (nametype)
        [/booleantype] (b2s) checkArgs
        {
            (true)
        }{
            (false)
        }ifelse
        
    }bind def
    
    /i2s{ % int to string int --> (int)
        [/integertype] (i2s) checkArgs

        /i exch def
        /orig i def
        
        /digits 1 def
        {
            i 10 lt{
                exit
            }if
            /i i 10 div store
            /digits digits 1 add store
        }loop
        
        orig digits string cvs
    }bind def


    /number2s{
        (--------- numberToS TODO ----------) =
        quit
    }bind def


    /checkArgs2{ % (procName) [n types]; also supports 'mark' --> bool
        aposkribh.CHECK_ARGS{ % Should args be checked at all? Global
            count 2 lt{
                mark (/checkargs: ) (checkArgs) (: Needs 2 arguments) strcatmark /stackunderflow signalerror
            }{
                % Zeroth arg must be stringtype (name of proc being tested)
                0 index type /stringtype ne{
                    mark (/checkargs: ) (checkArgs) (: 0 stack not /stringtype) strcatmark /typecheck signalerror
                }{
                    % First index must be array; list of types for args; array order is stack order
                    1 index type /arraytype ne{
                        mark (/checkargs: ) (checkArgs) (: 1 stack not /arraytype) strcatmark /typecheck signalerror
                    }{
                        % end args
                        2 dict begin
                        /_procName exch def
                        /_typesArray exch def

                        stack
                        end
                    }ifelse
                }ifelse
            }ifelse
        }if
    }bind def
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /checkArgs{ % (procName) [n types]; also supports 'mark' --> bool

        aposkribh.CHECK_ARGS{ % Should args be checked at all? Global
            count 2 lt{
                mark (/checkargs: ) (checkArgs) (: Needs 2 arguments) strcatmark /stackunderflow signalerror
            }{
                2 dict begin

                % First index must be array; list of types for args; array order is stack order
                1 index type /arraytype ne{
                    mark (/checkargs: ) (checkArgs) (: 1 stack not /arraytype) strcatmark /typecheck signalerror
                }{

                    % Zeroth arg must be stringtype (name of proc being tested)
                    0 index type /stringtype ne{
                        mark (/checkargs: ) (checkArgs) (: 0 stack not /stringtype) strcatmark /typecheck signalerror
                    }{

                        % end args
                        2 dict begin
                        /_procName exch def
                        /_typesArray exch def
                        aposkribh.TRACE{
                            () =
                            (--------------- TRACE) =
                            _procName =
                            aposkribh.TRACE_COUNT =
                            stack
                            (---------------) =
                            () =
                            /aposkribh.TRACE_COUNT aposkribh.TRACE_COUNT 1 add store                             
                        }if

                        _typesArray length count ge{
                            mark (/checkArgs: ) _procName (: Number of args in type array greater than number of args in stack) strcatmark /stackunderflow signalerror
                        }{
                            % TODO: Need to check if _typesArray is made up of type types or mark
                            % See if types match
                            0 1 _typesArray length 1 sub{
                                /i exch def
                                mark (/checkArgs: i=) i 16 string cvs (; type is /) i 4 add index type dup length string cvs (; need /) _typesArray i get dup length string cvs verbose2

                                _typesArray i get /anytype ne{
                                    i index type _typesArray i get ne{ % Bad arg: error
                                        mark (/checkArgs: ERROR:) _procName (: arg does not match type: index=) i i2s (; type is /) i 4 add index type dup length string cvs (; should be /) _typesArray i get dup length string cvs verbose2
                                        
                                        mark
                                        (/checkArgs: ERROR:) _procName (: arg does not match type: index=)
                                        i i2s (; type is /)
                                        i 4 add index type dup length string cvs
                                        (; should be /) _typesArray i get dup length string cvs
                                        strcatmark
                                        /typecheck signalerror
                                    }if
                                }if
                            }for
                        }ifelse
                        end
                    }ifelse
                }ifelse
            }ifelse
        }if
        aposkribh.TRACE{
            /aposkribh.TRACE_COUNT aposkribh.TRACE_COUNT 1 sub store                             
        }if
    }bind def

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /strcat{ % string0 string1 separator_string OR [s1 s2 s3] separator_string
        2 dict begin
        /_sep exch def
        % array of N strings on stack
        0 index type /arraytype eq{
            2 dict begin
            /_a exch def
            /str () def
            /first true def
            0 1 _a length 1 sub{
                /i exch def
                /s _a i get def

                first{
                    /first false store
                }{
                    /str str _sep concatstrings store
                }ifelse

                /str str s concatstrings store
            }for
            str
            end
        }{
            % 2 strings on stack
            count 2 lt{
                (/strcat) /stackunderflow signalerror
            }if
            0 1 1{
                /i exch def
                i index type /stringtype ne{
                    (/strcat: Not string) /stackunderflow signalerror
                }if
            }for
            % End Args
            %%%%%%%%%
            
            exch dup length    
            2 index length add string    
            dup dup 4 2 roll copy length
            4 -1 roll putinterval
        }ifelse
        end
    }bind def

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /arrayEqualsStack{ % [array of values] -> bool
        % Checks to see if values in array equal the values (remaining) on the stack
        [/arraytype] (arrayEqualsStack) checkArgs
        0 index type /arraytype ne{
            (/arrayEqualsStack: First arg is not an array) /typecheck signalerror
        }if

        3 dict begin
        /_a exch def
        %

        /same true def
        0 1 _a length 1 sub{
            /i exch def

            i index  _a i get eq not{
                /same false store
                exit
            }if
        }for

        same
        end
    }bind def

        

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /spaces{
        [/integertype] (spaces)  checkArgs
        2 dict begin
        /_n exch def
        /str () def
        0 1 _n{
            pop
            /str str ( ) () concatstrings store
        }for
        str
        end
    }bind def


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /switch{
        (SWITCH start) =
        % Needs 3 args:
        % 2:any type: value to be switched on
        % 1:dict: keys are the match; values are the return value
        % 0: executable array {} in []: default fall through return value
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        [/arraytype /dicttype /anytype] (/switch)  checkArgs

        /_default exch def
        /_caseDict# exch def    

        % value being checked can be anything
        /_v exch def

        % body
        _caseDict# _v known not{
            _default 0 get (/switch: default) execClean
        }{
            _caseDict# _v get (/switch: case) execClean
        }ifelse

    }bind def

    /nswitch{ % Array of args; if empty does all; otherwise walks through, matches and runs
        % Needs 3 args:
        % 2:[any type]: value to be switched on
        % 1:dict: keys are the match; values are the return value
        % 0: executable array {} in []: default fall through return value
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         [/arraytype /dicttype /arraytype] (/nswitch) checkArgs

        (HELLO) =
        

        /_default exch def
        /_caseDict# exch def    
        
        % array of values being checked can be anything
        /_a exch def
        
        % body
        (======================================================) =
        _a{
            () =
            (BODY) =
            /v exch def
            v _caseDict# _default switch =
            (GGGG) =
        }forall
        (END nswitch)
    }bind def


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /execClean{
        /procName exch def
        {
            %0 get
            exec
        }stopped{
            mark (/execClean: ) procName strcatmark /undefined signalerror
        }if

    }bind def

    

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /memoize# 20 dict def
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /memoize{ % 1arg {proc} /dictname
        count 3 lt{
            (/memoize: Need 3 args) /stackunderflow signalerror
        }if 
        0 index type /nametype eq not{
            (/memoize: 0 arg not /nametype) /typecheck signalerror
        }if
        1 index type /arraytype eq not{
            (/memoize: 1 arg not /arraytype) /typecheck signalerror
        }if
        (EEEEEEEEEEEEEE)=
        stack
        (EEEEEEEEEEEEEE)=

        [/nametype /arraytype /anytype] (memoize) checkArgs        

        % args
        
        10 dict begin
        /_dictName exch def
        /_proc exch def
        /_arg exch def


        memoize# _dictName known{
            /dict# memoize# _dictName get def
        }{
            /dict# 20 dict def
            memoize# _dictName dict# put
        }ifelse

        dict# _arg known{
            mark (momoize HIT: ) _dictName n2s verbose2
            dict# _arg get % $

        }{

            /$value _arg _proc (/memoize) execClean def
            dict# _arg $value put
            $value
            mark (memoize MISS: ) verbose2
        }ifelse
        end
    }def


    /a2s{ % anything to string
        (a2s---------) =
        count 0 eq{
            mark (/a2s: needs one argument) /undefined signalerror
        }if
        2 dict begin
        /v exch def

        v type n2s
        <<
            (stringtype)  {v}
            (nametype)  {v n2s}
            (integertype) {v i2s}
            (booleantype) {v b2s}
            (realtype)    {v r2s}
            (dicttype)    {(<<dict>>) }
            (arraytype)   {(arraytype)}
        >>
        [{(Unknown)}]
        switch


        end
    }bind def


    /contains{ % v array _> bool
        [/anytype /arraytype] (/contains) checkArgs

        %%%%
        2 dict begin
        /_v exch def
        /_a exch def

        /containsFlag false def
        _a
        {
            _v eq{
                /containsFlag true store
                exit
            }if
        }forall

        containsFlag
        end
    }bind def

    /forxy{ % loops x outer, y inner and executes proc with x y on stack
        [/arraytype /dicttype] (forxy) checkArgs

        2 dict begin

        /proc exch def
        /d# exch def
        d# forxy_Types# validateTypeDict

        /outer d# /x get def
        /inner d# /y get def

        outer /start get
        outer /step get
        outer /end get{
            /xx exch def
            inner /start get
            inner /step get
            inner /end get{
                xx proc
            }for % inner
        }for % outer
        end
    }def


    /validateTypeDict{ % valueDict typeDict  --> error if fails; Validates a value dict has the 1) same keys; and 2) They key values have the types defined in the typeDict
        [/dicttype /dicttype] (/validateTypeDict) checkArgs
        (validateTypeDict START) =
        0 index type /dicttype ne{
            (/validateTypeDict: first arg not /dicttype) /typecheck signalerror
        }if
        1 index type /dicttype ne{
            (/validateTypeDict: second arg not /dicttype) /typecheck signalerror
        }if

        %%%%
        2 dict begin
        /typeDict# exch def
        /valueDict# exch def


        % loop through type dict
        typeDict#{
            /types# exch def
            /tkey exch def

            valueDict# tkey known not{
                mark (/validateTypeDict: key in types not in values: /) tkey n2s (  ) strcatmark /typecheck signalerror
            }if

            % Get values for this key
            /values# valueDict# tkey get def

            types#{
                /valueType exch def
                /valueKey exch def

                % Does type key exist in value dict?
                values# valueKey known not{
                    mark (/validateTypeDict: value key in types not in values: /) tkey n2s (/) valueKey n2s strcatmark /typecheck signalerror
                }if

                % Does value key value type match type key type?
                values# valueKey get type
                types# valueKey get
                ne{
                    mark (/validateTypeDict: value does not match type: /)
                    tkey n2s (/)
                    valueKey n2s       (/)
                    values# valueKey get type n2s
                    (=[)
                    values# valueKey get a2s 
                    (])
                    ( should be: /)
                    types# valueKey get n2s
                    strcatmark
                    /typecheck signalerror
                }if
                
            }forall
        }forall
        
        end
    }bind def

    /isNumber{
        [/anytype] (/isNumber) checkArgs
        
        /_v exch def

        _v type /integertype eq
        _v type /realtype eq
        or
    }bind def

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /orAll{ % [] -> bool
        [/arraytype] (/orAll) checkArgs

        0 index xcheck{
            mark (/orAll: array should not be executable )                     strcatmark /typecheck signalerror
        }if

        %%%
        2 dict begin
        /_a exch def

        %%%%
        /flag false def

        _a{
            dup
            xcheck{
                (/orAll) execClean
            }if
            {
                /flag true store
                exit
            }if
        }forall

        flag
        end
    }bind def


    /eswitch{ % value, array of array pairs; each pair [ {} {} ]; first returns bool with val on stack; second executed if first is true; then exit; may or may not return value (depends on second in pair)
        [/arraytype /anytype] (eswitch) checkArgs
        
        /_a exch def
        /_v exch def
        
        _a{
            /p exch def
            % If the first one returns true with the value
            _v p 0 get (/eswitch) execClean{
                % Run the second and leave
                p 1 get (/eswitch) execClean
                exit
            }if
        }forall
    }bind def

    /checkRange{
        stack
        (S) =
        0 index =
        %[/anytype /anytype /anytype] (checkArgs) checkArgs
        [/numbertype /numbertype /numbertype /stringtype] (checkArgs) checkArgs

        10 dict begin
        /_max exch def
        /_min exch def
        /_val exch def
        /_procName exch def
        %
        _val _min lt
        _val _max gt
        or{
            mark (/checkRange: out of range in: [) _procName (]) (  val=) _val i2s ( min=) _min i2s ( max=) _max i2s ( )strcatmark /rangecheck signalerror
            quit
        }if
        end
    }def


    /arraySameAsStack{
        3 dict begin
        /_array exch def

        /returnValue true def
        /msg () def

        count /c exch def

        
        c _array length lt{
            /returnValue false store
            /msg (Length of stack less than expected:)
            c 4 string cvs concatstrings
            ( instead of ) concatstrings
            _array length 4 string cvs concatstrings
            store
            return =
        }{
            0 1 _array length 1 sub{
                /i exch def
                i index _array i get ne{
                    /returnValue false store
                    /msg (At least one value is expected results array does not equal stack value: position: ) i 10 string cvs concatstrings
                    store
                    exit
                }if
            }for
        }ifelse
        returnValue not{
            msg
        }if
        returnValue
        end
    }def


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end % 
}if











