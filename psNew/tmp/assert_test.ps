
(assert.ps) run

aposkribh.assert#
begin


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Should not FAIL (Positive tests)
[
    %    ( (MMM) {  2 3 add pop } TR)
    ( (test-56) { 1 2 add } TR)


     (1 1 assertAtLeastNArgs)
     ((m) 1  assertAtLeastNArgs)
     (77 66  2 assertAtLeastNArgs)
     (0 assertAtLeastNArgs)


      (0 assertZeroOrPositiveInteger)
      (100 assertZeroOrPositiveInteger)

     (33 1 assertStackIsBigEnoughFromArg0)
     ((mm) 33 2 assertStackIsBigEnoughFromArg0)
     (44 (mm) 33 2 assertStackIsBigEnoughFromArg0)
    
      (10   0 assertInteger)
      (0    0 assertInteger)
      (-100 0 assertInteger)
      ((foo) -100 0 assertInteger)
      (44 (foo) -100 2 assertInteger)
      ( {} 0 assertProc  )
      ( {} 42 1 assertProc  )

      ( (foo) 42 1 assertString  )
      ( 34 (foo)  0 assertString  )
      ( (foo) 42.3 0 assertReal  )
      ( (foo) 42.3 0 assertNumber  )
      ( (foo) 42 0 assertNumber  )

      ( [] 0 assertArray )

     
      ( [] [] assertArraysEqual )
      ( [1 2 3 4] [1 2 3 4] assertArraysEqual )
      ( [(foo) null 65.4 3 4 true /stringtype {} ] [(foo) null 65.4 3 4 true /stringtype {}] assertArraysEqual  )

]
% forall
{
    10 dict begin
    % stopped
    {
        /test_proc exch def

        aposkribh.ASSERTIONS_TRACE_ON{
            () =
            (---------------------------------------------------------------------------------------------) =
            (assert_test.ps: Running positive test:) =
            test_proc =
        }if
        
        clear
        test_proc cvx
        exec
    }stopped{ % if
        (FAIL: This should run successfully but did not:) =
        (A) =
        test_proc =
        (B) =
        $error /errorname get =
        $error /command get =
        (assert_test.ps) /undefined signalerror
    }if
    end
}forall


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Should FAIL  (Negative tests)
[
    [ ( (test1) {  2 (m) add } TR) /typecheck ]

     [ (assertAtLeastNArgs)  /stackunderflow ]
     [ (-1 assertAtLeastNArgs) /rangecheck ]
     [ (1 assertAtLeastNArgs)  /stackunderflow ]
     [ ((M) assertAtLeastNArgs)  /typecheck ]
     [ (1.5 assertAtLeastNArgs)  /typecheck ]
     [ (<<>> assertAtLeastNArgs)  /typecheck ]
     [ ((M) 2 10 assertAtLeastNArgs)  /stackunderflow ]


     [ ((foo) assertZeroOrPositiveInteger)   /typecheck      ]
     [ (-1 assertZeroOrPositiveInteger)      /rangecheck      ]
     [ (/stringtype  assertZeroOrPositiveInteger)    /typecheck      ]
     [ (45.5 assertZeroOrPositiveInteger)    /typecheck      ]
     [ (<<>> assertZeroOrPositiveInteger)    /typecheck      ]
     [ ([22] assertZeroOrPositiveInteger)    /typecheck      ]
     [ ([] assertZeroOrPositiveInteger)    /typecheck      ]
     [ (assertZeroOrPositiveInteger)      /stackunderflow     ]
     [ (mark  assertZeroOrPositiveInteger)    /typecheck      ]
     [ (null assertZeroOrPositiveInteger)    /typecheck      ]
     [ (true assertZeroOrPositiveInteger)    /typecheck      ]
     [ ({}  assertZeroOrPositiveInteger)    /typecheck      ]

     [ (assertStackIsBigEnoughFromArg0)    /stackunderflow ]
     [ (2 assertStackIsBigEnoughFromArg0)    /stackunderflow ]

     [ ( assertInteger)                  /stackunderflow ]
     [ ( 22 2 assertInteger)             /stackunderflow ]
     [ ( (foo) assertInteger)            /typecheck      ]
     [ ( 22.3 0 assertInteger)           /typecheck      ]
     [ ( 44 (foo) -100 3 assertInteger)  /stackunderflow ]
     [ ( 44 (foo) -100 1 assertInteger)  /typecheck      ]
     [ ( 44 (foo) -100 -1 assertInteger) /rangecheck     ]
     [ ( (foo) 0 assertInteger)          /typecheck      ]

     [ ( assertProc  )           /stackunderflow ]
     [ ( {} 42 0 assertProc  )           /typecheck ]
     [ ( 42 [0] 0 assertProc  ) /typecheck ]

     [ ( assertString  ) /stackunderflow ]
     [ ( 0 assertString  ) /stackunderflow  ]
     [ ( 42 0 assertString  ) /typecheck ]
     [ ( 42.2 0 assertString  ) /typecheck ]
     [ ( true 0 assertString  ) /typecheck ]
     [ ( <<>> 0 assertString  ) /typecheck ]
     [ ( null 0 assertString  ) /typecheck ]
     [ ( /stringtype 0 assertString  ) /typecheck ]
     [ ( {}  0 assertString  ) /typecheck ]
     [ ( mark  0 assertString  ) /typecheck ]

     [ ( assertArray ) /stackunderflow ] 
     [ ( 0 assertArray ) /stackunderflow ] 
     [ ( 3 0 assertArray ) /typecheck ]
     [ ( 3.0 0 assertArray ) /typecheck ]
     [ ( <<>> 0 assertArray ) /typecheck ]
     [ ( (foo) 0 assertArray ) /typecheck ]
     [ ( [ 0 assertArray ) /typecheck ]
     [ ( mark 0 assertArray ) /typecheck ]
     [ ( null 0 assertArray ) /typecheck ]
     [ ( true 0 assertArray ) /typecheck ]
     [ ( /integertype 0 assertArray ) /typecheck ]
    
     [ (  assertArraysEqual ) /stackunderflow ]
     [ ( 87  assertArraysEqual ) /stackunderflow ]
     [ ( 85 87  assertArraysEqual ) /typecheck ]
     [ ( [85] [87]  assertArraysEqual ) /rangecheck ]
     [ ( 22 [87]  assertArraysEqual ) /typecheck ]
]{ % forall
    10 dict begin
    /test_proc null def
    /expectedError null def
    { % stopped
        /a exch store
        /test_proc a 0 get store
        /expectedError a 1 get store
        aposkribh.ASSERTIONS_TRACE_ON{
            () =
            (---------------------------------------------------------------------------------------------) =
            (assert_test.ps: Running negative test:) =
            test_proc =
        }if
        
        clear
        test_proc cvx
        exec
    }stopped{ % ifelse
        /actualError $error /errorname get def
        actualError expectedError ne{ % if
            (FAIL: This should not run successfully but should throw a error specific error: Threw wrong error.) =
            (  Expected error: /) expectedError expectedError length string cvs concatstrings =
            (    Actual error: /) actualError 20 string cvs concatstrings =
            %(% --> {) proc concatstrings ( }) concatstrings =
            $error /command get =
            (assert_test.ps) /undefined signalerror
        }if
    }{
        () =
        (FAIL: This should not run successfully but should throw an error. Did not throw an error.) =
        %(% --> {) proc concatstrings ( }) concatstrings =
        (assert_test.ps) /undefined signalerror
    }ifelse
    end
}forall



end
