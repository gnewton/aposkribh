
(assert.ps) run

aposkribh.assert#
begin


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Should not FAIL (Positive tests)
[
    %    ( (MMM) {  2 3 add pop } trace)
    ( (test-56) { 1 2 add } trace)


    (1 1 (test) assertAtLeastNArgs)
    ((m) 1  (test) assertAtLeastNArgs)
    (77 66  2 (test) assertAtLeastNArgs)
    (<<>> 1 (test) assertAtLeastNArgs)

    (0 0 assertZeroOrPositiveIntegerN)
    (100 0 assertZeroOrPositiveIntegerN)

    (33 1 assertStackIsBigAsArg0)
    ((mm) 33 2 assertStackIsBigAsArg0)
    (44 (mm) 33 2 assertStackIsBigAsArg0)
    
    (10   0 assertIntegerN)
    (0    0 assertIntegerN)
    (-100 0 assertIntegerN)
    ((foo) -100 0 assertIntegerN)
    (44 (foo) -100 2 assertIntegerN)
    ( {} 0 assertProcN  )
    ( {} 42 1 assertProcN  )

    ( (foo) 42 1 assertStringN  )
    ( 34 (foo)  0 assertStringN  )
    ( (foo) 42.3 0 assertRealN  )
    ( (foo) 42.3 0 assertNumber  )
    ( (foo) 42 0 assertNumber  )

    ( [] 0 assertArrayN )

    
    ( [] [] assertArraysEqual )
    ( [1 2 3 4] [1 2 3 4] assertArraysEqual )
    ( [(foo) null 65.4 3 4 true /stringtype {} ] [(foo) null 65.4 3 4 true /stringtype {}] assertArraysEqual  )

]
% forall
{
    10 dict begin
    % stopped
    {
        /test_proc exch def

        aposkribh.ASSERTIONS_TRACE_ON{
            () =
            (---------------------------------------------------------------------------------------------) =
            (assert_test.ps: Running positive test:) =
            test_proc =
        }if
        
        clear
        test_proc cvx
        exec
    }stopped{ % if
        (FAIL: This should run successfully but did not:) =
        (proc with args=) =
        test_proc =
        (error=) =
        $error /errorname get =
	(command=) =
        $error /command get =
        (assert_test.ps) /undefined signalerror
    }if
    end
}forall


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Should FAIL  (Negative tests)
[
    [ (10 -1 (test) assertAtLeastNArgs) /rangecheck ]
    %
    [ ((M) 2 10 (test) assertAtLeastNArgs)  /stackunderflow ]
    [ (assertAtLeastNArgs)  /stackunderflow ]
    [ (1 (test) assertAtLeastNArgs)  /stackunderflow ]
    [ (<<>> (test) assertAtLeastNArgs)  /stackunderflow ]
    %
    [ ( (test1) {  2 (m) add } trace) /typecheck ]
    [ ((M) (Z) (test) assertAtLeastNArgs)  /typecheck ]
    [ ((Z) 1.5 (test) assertAtLeastNArgs)  /typecheck ]



    [ ((foo) 0 assertZeroOrPositiveIntegerN)   /typecheck      ]
    [ (-1 0 assertZeroOrPositiveIntegerN)      /rangecheck      ]
    [ (/stringtype  0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ (45.5 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ (<<>> 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ ([22] 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ ([] 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ (assertZeroOrPositiveIntegerN)      /stackunderflow     ]
    [ (0 assertZeroOrPositiveIntegerN)      /stackunderflow     ]
    [ ((foo) 2 assertZeroOrPositiveIntegerN)      /stackunderflow     ]
    [ (mark 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ (null 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ (true 0 assertZeroOrPositiveIntegerN)    /typecheck      ]
    [ ({}  0 assertZeroOrPositiveIntegerN)    /typecheck      ]

    [ (assertStackIsBigAsArg0)    /stackunderflow ]
    [ (2 assertStackIsBigAsArg0)    /stackunderflow ]

    [ ( assertIntegerN)                  /stackunderflow ]
    [ ( 22 2 assertIntegerN)             /stackunderflow ]
    [ ( (foo) assertIntegerN)            /typecheck      ]
    [ ( 22.3 0 assertIntegerN)           /typecheck      ]
    [ ( 44 (foo) -100 3 assertIntegerN)  /stackunderflow ]
    [ ( 44 (foo) -100 1 assertIntegerN)  /typecheck      ]
    [ ( 44 (foo) -100 -1 assertIntegerN) /rangecheck     ]
    [ ( (foo) 0 assertIntegerN)          /typecheck      ]

    [ ( assertProcN  )           /stackunderflow ]
    %
    [ ( {} 42 0 assertProcN  )           /typecheck ]
    [ ( 42 [0] 0 assertProcN  ) /typecheck ]

    [ ( assertStringN  ) /stackunderflow ]
    [ ( 0 assertStringN  ) /stackunderflow  ]
    %
    [ ( 42 0 assertStringN  ) /typecheck ]
    [ ( 42.2 0 assertStringN  ) /typecheck ]
    [ ( true 0 assertStringN  ) /typecheck ]
    [ ( <<>> 0 assertStringN  ) /typecheck ]
    [ ( null 0 assertStringN  ) /typecheck ]
    [ ( /stringtype 0 assertStringN  ) /typecheck ]
    [ ( {}  0 assertStringN  ) /typecheck ]
    [ ( mark  0 assertStringN  ) /typecheck ]

    [ ( assertArrayN ) /stackunderflow ] 
    [ ( 0 assertArrayN ) /stackunderflow ]
    %
    [ ( 3 0 assertArrayN ) /typecheck ]
    [ ( 3.0 0 assertArrayN ) /typecheck ]
    [ ( <<>> 0 assertArrayN ) /typecheck ]
    [ ( (foo) 0 assertArrayN ) /typecheck ]
    [ ( [ 0 assertArrayN ) /typecheck ]
    [ ( mark 0 assertArrayN ) /typecheck ]
    [ ( null 0 assertArrayN ) /typecheck ]
    [ ( true 0 assertArrayN ) /typecheck ]
    [ ( /integertype 0 assertArrayN ) /typecheck ]
    
    [ (  assertArraysEqual ) /stackunderflow ]
    [ ( 87  assertArraysEqual ) /stackunderflow ]
    %
    [ ( [85] [87]  assertArraysEqual ) /rangecheck ]
    %
    [ ( 85 87  assertArraysEqual ) /typecheck ]
    [ ( 22 [87]  assertArraysEqual ) /typecheck ]
]{ % forall
    10 dict begin
    /test_proc null def
    /expectedError null def
    { % stopped
        /a exch store
        /test_proc a 0 get store
        /expectedError a 1 get store
        aposkribh.ASSERTIONS_TRACE_ON{
            () =
            (---------------------------------------------------------------------------------------------) =
            (assert_test.ps: Running negative test:) =
            test_proc =
        }if
        
        clear
        test_proc cvx
        exec
    }stopped{ % ifelse
        /actualError $error /errorname get def
        actualError expectedError ne{ % if
            (FAIL: This should not run successfully but should throw a error specific error: Threw wrong error.) =
            (  Expected error: /) expectedError expectedError length string cvs concatstrings =
            (    Actual error: /) actualError 20 string cvs concatstrings =
            %(% --> {) proc concatstrings ( }) concatstrings =
            $error /command get =
            (assert_test.ps) /undefined signalerror
        }if
    }{
        () =
        (FAIL: This should not run successfully but should throw an error. Did not throw an error.) =
        %(% --> {) proc concatstrings ( }) concatstrings =
        (assert_test.ps) /undefined signalerror
    }ifelse
    end
}forall



end
