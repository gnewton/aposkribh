(test.ps) [(globals.ps) (assert.ps) (types.ps)] (init.ps) run

(types_examples.ps) run


/aposkribh.test#
(test.ps)
{
    %Should not rely on any primative.ps
    /aposkribh.test# 20 dict def

    aposkribh.assert# begin
    aposkribh.test# begin

    /aposkribh.StopOnFail where not{
        /aposkribh.StopOnFail true def
    }if

    /aposkribh.Testing where not{
        /aposkribh.Testing true def
    }if


    % simple tests
    /test.F{ % { } : proc should return true
        0 assertProcN
        [false] test.V
    }bind def
    
    /test.T{ % { } : proc should return false
        0 assertProcN
        [true] test.V
    }bind def
    

    /test.V{ % {} [expected values left on stack] : proc should run and return specific values on stack
        1 assertProcN
        10 dict begin
        /_expectedStack exch def
        %
        
        dup /procAsLiteral exch cvlit def

        aposkribh.VERBOSE_TEST{
            () =
            (test.V) =
            procAsLiteral ===
        }if
        
        {
            /proc exch def
            clear
            {proc} exec
        }stopped{
            procAsLiteral ===
            _expectedStack ===
            (Unexcpected error: ) =
            $error /errorname get =
            $error /errorname get
            (/test.V: FAIL /test.V: Error: Should run OK and return results)  exch signalerror
        }{
            _expectedStack arraySameAsStack not{
                =
                procAsLiteral ===
                _expectedStack ===
                (Stack +) =
                stack
                (Stack -) =
                (Fail: test.V: Results stack does not match)  /invalidexit signalerror
            }if
        }ifelse

        end
        clear
    }bind def


    
    /test.V2{ % {} [expected values left on stack] : proc should run and return specific values on stack
        % 0 assertNamed NOT IMPLEMENTED
        1 assertProcN
        10 dict begin
        /_expectedStack exch def
        %
        
        dup /procAsLiteral exch cvlit def

        aposkribh.VERBOSE_TEST{
            () =
            (test.V) =
            procAsLiteral ===
        }if
        
        {
            /proc exch def
            clear
            {proc} exec
        }stopped{
            procAsLiteral ===
            _expectedStack ===
            (Unexcpected error: ) =
            $error /errorname get =
            $error /errorname get
            (/test.V: FAIL /test.V: Error: Should run OK and return results)  exch signalerror
        }{
            _expectedStack arraySameAsStack not{
                =
                procAsLiteral ===
                _expectedStack ===
                (Stack +) =
                stack
                (Stack -) =
                (Fail: test.V: Results stack does not match)  /invalidexit signalerror
            }if
        }ifelse
        end
        clear
    }bind def


    /test.E{ % { } /errortype : Should run and throw a specific error
        % 0 assertNamed NOT IMPLEMENTED
        1 assertProcN
        
        10 dict begin
        /_expectedError exch def

        dup /procAsLiteral exch cvlit def

        aposkribh.VERBOSE_TEST{
            () =
            (test.E) =
            procAsLiteral ===
        }if

        {
            /d exch def
            clear
            {d} exec
        }stopped{
            /actualError $error /errorname get def
            
            actualError _expectedError ne{
                (FAIL: Expected error but wrong error) =
                procAsLiteral ===
                actualError =
                _expectedError =
                (/test.E: ) /invalidexit signalerror
            }if
        }{
            (FAIL: Expected error but no error) =
            procAsLiteral ===
            _expectedError =
            (/test.E: ) /invalidexit signalerror
        }ifelse
        end
        clear
    }bind def

    /test.E2{ % { } /errortype : Should run and throw a specific error
        % 0 assertNamed NOT IMPLEMENTED
        1 assertStringN
        
        10 dict begin
        
        /_expectedError exch def

        /proc exch  def

        aposkribh.VERBOSE_TEST{
            () =
            (test.E) =
            proc ===
        }if

        {
            clear
            proc cvx
            exec
        }stopped{
            /actualError $error /errorname get def
            
            actualError _expectedError ne{
                (FAIL: Expected error but wrong error) =
                proc ===
                actualError =
                _expectedError =
                (/test.E: ) /invalidexit signalerror
            }if
        }{
            (FAIL: Expected error but no error) =
            proc ===
            _expectedError =
            (/test.E: ) /invalidexit signalerror
        }ifelse
        end
        clear
    }bind def

    /runTests{

    }bind def


    /testLibrary_Pass{
        % dict to test
        % Given a library, uses its /Args# to generate passing tests
        (% testLibrary_Pass START) =
        
        1 (testLibrary_Pass) assertAtLeastNArgs
        0 assertDictN

        0 index /__ArgsTypes# known not{
            (/testLibrary_positive: Dict does not contain /__ArgsTypes# dict) /undefined signalerror
        }if

        2 dict begin

        /_library# exch def

        aposkribh.args# begin
        _library# argsValidateLibrary
        end

        /allLibProcsWithArgs _library# /__ArgsTypes#  get /Args# get def

        allLibProcsWithArgs{
            /thisProcArgsTypeList exch def
            /thisProcName exch def

            aposkribh.args#
            begin
            _library# thisProcName argsAssertLibHasProcDict
            end
            
            % Make args list from types list
            thisProcArgsTypeList makeTestArgs /testArgs exch  def
            /testResultTypes exch def

            0 1 testArgs length 1 sub{
                %testArgs{
                () =
                (----------------------------------------------------------------------------------------) =
                /i exch def
                /args testArgs i get def
                /resultTypes testResultTypes i get def
                (Testing ) thisProcName dup length string cvs concatstrings =
                (  with args: ) =
                args ===
                args aload pop
                (Results: ) =
                {
                    _library# thisProcName get exec === % Run proc with test args
                    %resultTypes ===
                    %% TODO: Test if stack (results) type(s) match /resultTypes
                    (DONE) =
                }stopped{
                    % Should not stop
                    (/allLibProcsWithArgs: ERROR: Should not fail ) =
                    $error /errorname get =
                    $error /errorname get
                    (/allLibProcsWithArgs: )  exch signalerror
                }if
            }for
        }forall
        
        end
        (% testLibrary_Pass END) =
    }bind def

    /NumRandomTests 10 def % The number of runs random args are applied
    
    /makeTestArgs{ % array of array of types --> array of array of values of that type
        0 assertArrayN

        2 dict begin
        /_thisProcArgsTypeList exch def

        (M) =
        _thisProcArgsTypeList ===
        (m) =

        /$argValuesList _thisProcArgsTypeList length NumRandomTests mul array def
        /$argResultsTypeList _thisProcArgsTypeList length NumRandomTests mul array def

        /argValuesListCounter 0 def
        
        0 1 _thisProcArgsTypeList length 1 sub{
            /i exch def

            /thisArgsAndResults _thisProcArgsTypeList i get def
            /thisArgs thisArgsAndResults 0 get def
            /thisResultsTypes thisArgsAndResults 1 get def

            NumRandomTests{
                /thisArgsValuesArray thisArgs length array def
                $argValuesList argValuesListCounter thisArgsValuesArray put
                $argResultsTypeList argValuesListCounter thisResultsTypes put
                
                /argValuesListCounter argValuesListCounter 1 add store
                % ARGS values
                0 1 thisArgs length 1 sub{
                    /j exch def

                    /ttype  thisArgs j get def

                    % Randomly add type values
                    thisArgsValuesArray j
                    aposkribh.types_examples# /typesWithExamplars get ttype get randomArrayValue
                    put
                }for
            }repeat
        }for
        $argResultsTypeList
        $argValuesList 
        end
    }bind def

    end  % aposkribh_test#

    end % aposkribh.assert#
}aposkribh.libraryLoader

aposkribh.PSFile.END
