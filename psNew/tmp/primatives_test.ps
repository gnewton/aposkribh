

(primatives.ps) run

(test.ps) run

aposkribh_primatives# begin
aposkribh_test# begin


/checkArgs_Tests{
    (% START checkArgsTests) =
    (%% Negative tests) =



    clear

    {
        32.2 (checkArgs) [/integertype] checkArgs
    }assertError
    (/checkArgs: /real instead of /integertype) runTest


    clear
    {
        (checkArgs) [/integertype] checkArgs
    }assertError
    (/checkArgs: Empty array) runTest



    clear
    {
        %<<>> <<>> checkArgs
        (foo) (checkArgs) <<>> checkArgs 
    }assertError
    (/checkArgs: 0 arg not array) runTest




    clear
    {
        (foo)   (checkArgs)  [/integertype] checkArgs
    }assertError
    (/checkArgs: Actual arg 1 not integer) runTest

    clear
    {
        (foo) (foo)   (procName) [/integertype /stringtype] checkArgs
    }assertError
    (/checkArgs: Actual 1 arg not integer) runTest

    
    
    (%% Positive tests) =

    clear
    {
        (foo) 32   (procName) [/integertype /stringtype] checkArgs
    }assertNotError
    (/checkArgs: mmmm Actual 1 arg not integer) runTest

    clear
    {
        (checkArgs) [] checkArgs
    }assertNotError
    (/checkArgs: No args in args type array) runTest


    
    (% END checkArgsTests) =

}def


/double{
    2 mul
}def

/triple{
    3 mul
}def


/doubleM{
    {double} /doubleDict# memoize
}def

/tripleM{
    {triple} /tripleDict# memoize
}def


 2 doubleM  =
 3 doubleM =
 4 doubleM =
 5 tripleM =
 2 doubleM  =
 3 doubleM =
 5 doubleM =






(A) =
 /n .47777777777777777777777777777 def
 (m) =
n r2s =

clear
345
 <<
      45 {10 23 add}
%     45 {mmm}
     55 {(fiftey-five)}
 >>
 {(Unknown)}
% {Unknown}
switch =

checkArgs_Tests


clear

mark (A) (BB) (CCC) strcatmark =

mark (A) (BB) (DDD) verbose2



100 i2s =
10 i2s =
1 i2s =
0 i2s =


end % aposkribh_test#
end % aposkribh_primatives# 
