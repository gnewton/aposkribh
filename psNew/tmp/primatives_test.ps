

(primatives.ps) run

(test.ps) run

%() =
%(----------------------------------------------------------------------------------) =
%(TEST primatives_test.ps START) =

aposkribh.primatives# begin
aposkribh.test# begin

/aposkribh.Testing true store

/test.primatives# 20 dict def

test.primatives# begin

/checkArgs.Tests{
    /TestingProc (/checkArgs) def
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %(%% ExpectErrors tests) =
    [
        { {32.2 [/integertype] (checkArgs)  checkArgs}  (/checkArgs: /real instead of /integertype) /typecheck }
        { {[/integertype] (checkArgs) checkArgs      }  (/checkArgs: Want 1 integer; stack empty) /stackunderflow}
        { {1 [/stringtype] (procName) checkArgs      }  (/checkArgs: Actual 1 arg not string) /typecheck}
        { {(foo)  <<>> (checkArgs) checkArgs         }  (/checkArgs: 0 arg not array) /typecheck}
        { {(o) [/integertype] (procName) checkArgs   }  (/checkArgs: Actual 1 arg not integer) /typecheck}

    ] runTests.ExpectErrors

    %(% END) =
}def % checkArgs.Tests


/arrayEqualsStack.Tests{
    /TestingProc (/arrayEqualsStack) def
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    (%% ExpectErrors tests) =
    [

        { { 3  arrayEqualsStack  }  (/arrayEqualsStack: First arg not array) /typecheck}
        { { [43]  arrayEqualsStack  }  (/arrayEqualsStack: First arg not array) /stackunderflow}
    ] runTests.ExpectErrors

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %(%% ExpectedValues tests) =
    [
        { {3 2 1  [1 2 3]  arrayEqualsStack  }  [true]  (/arrayEqualsStack: All the same ints) }
        { {4 2 1  [1 2 9]  arrayEqualsStack  }  [false] (/arrayEqualsStack: Same # items; last one different) }
        { {  []  arrayEqualsStack  }  [true] (/arrayEqualsStack: Empty stack) }
        { {4  [4]  arrayEqualsStack  }          [true]  (/arrayEqualsStack: single value, 4) }
    ] runTests.ExpectedValues

    
}bind def


/strcatmark.Tests{
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %   (%% ExpectErrors tests) =
    [
        {{(32.2) (strcatmark)  strcatmark}
            (/strcatmark: Missing mark)
            /unmatchedmark}

        {{mark 32  (strcatmark)  strcatmark}
         (/strcatmark: integer wrong type)
         /typecheck}

        {{mark /foo  (strcatmark)  strcatmark}
         (/strcatmark: integer wrong type)
         /typecheck}
    ] runTests.ExpectErrors

}def

/verbose2.Tests{

}def

/stack2array{

}def

/r2s.Tests{

}def

/n2s.Tests{

}def

/i2s.Tests{

}def

/strcat.Tests{

}def

/spaces.Test{

}def

/switch.Tests{

}def

/nswitch.Tests{

}def

/execClean.Tests{

}def

/memoize.Tests{

}def


end % test.primatives# begin


test.primatives# {
    exch pop
    exec
}forall


end % aposkribh_test#
end % aposkribh_primatives# 



% (TEST primatives_test.ps END) =
% (----------------------------------------------------------------------------------) =
% () =
