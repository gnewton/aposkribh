
(globals.ps) run

/aposkribh.types# where not{

    /aposkribh.types# 50 dict def

    aposkribh.types# begin

    /newtypes# <<%30 dict def % name {}returning bool
                   /numbertype {isNumberType} % int or real
                   /numberarraytype {isNumberArrayType} % int or real
                   /stringarraytype {isStringArrayType} % int or real

                   % /numberarraytype {
                   %     5 dict begin
                   %     type dup /integertype eq exch /realtype eq or
                   %     end
                   % } % int or real
               >>def

     /isNumberType{
         type dup /integertype eq exch /realtype eq or % int or real
     }def


     /isNumberArrayType{
         3 dict begin
         /_v exch def
         _v type /arraytype ne{
             false
         }{
             true
             _v {
                 isNumberType not{
                     pop
                     false
                     exit
                 }if
             }forall
         }ifelse
         end
     }def

     /isStringArrayType{
         3 dict begin
         /_v exch def
         _v type /arraytype ne{
             false
         }{
             true
             _v {
                 type /stringtype eq not{
                     pop
                     false
                     exit
                 }if
             }forall
         }ifelse
         end
     }def
    
    /isType{
        [/nametype /anytype] (isType) checkArgs
        2 dict begin
        /_t exch def
        /_v exch def

        _v _t isAddedType{
            true
        }{
            [
                {_t /stringtype eq}
                {_t /integertype eq}
                {_t /nametype eq}
                {_t /realtype eq}
                {_t /booleantype eq}
                {_t /dicttype eq}
            ]orAll
        }ifelse
        end
    }bind def


    /isAddedType{
        2 dict begin
        /_t exch def
        /_v exch def
        
        aposkribh.types# /newtypes# get _t known{
            _v aposkribh.types# /newtypes# get _t get exec 
        }{
            false
        }ifelse

        end
    }bind def



    /addType{ %nametype {proc}
        [/arraytype /stringtype] (/addedType) checkArgs
        0 index xcheck not{
            (/addType: First arg needs to be executable and return boolean) /stackunderflow signalerror
        }if

        /_typeTest exch def
        /_typeName exch def


        aposkribh.types# /newtypes# known not{
            (NOOOOOOO) =
            quit
        }if

        aposkribh.types# /newtypes# get _typeName {_typeTest} put
    }bind def
    
    end % aposkribh.types#
}if
