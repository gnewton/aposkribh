
(globals.ps) run
(assert.ps) run

/aposkribh.types# where not{

    /aposkribh.types# 50 dict def

    aposkribh.assert# begin
    aposkribh.types# begin

    /builtinTypesAsStrings
    <<
        /arraytype (arraytype)
        /booleantype (booleantype)
        /integertype (integertype)
        /marktype (marktype)
        /nametype (nametype)
        /nulltype (nulltype)
        /realtype (realtype)
        /stringtype (stringtype)
    >>def

    /oneOrMore
    <<
        /arraytype+ (arraytype)
        /booleantype+ (booleantype)
        /integertype+ (integertype)
        /marktype (marktype)
        /nametype (nametype)
        /nulltype (nulltype)
        /realtype (realtype)
        /stringtype (stringtype)
    >>def

    /zeroOrMore
    <<
        /arraytype* (arraytype)
        /booleantype* (booleantype)
        /integertype* (integertype)
        /marktype* (marktype)
        /nametype* (nametype)
        /nulltype* (nulltype)
        /realtype* (realtype)
        /stringtype* (stringtype)
    >>def

    /zeroOrOne
    <<
        /arraytype? (arraytype)
        /booleantype? (booleantype)
        /integertype? (integertype)
        /marktype? (marktype)
        /nametype? (nametype)
        /nulltype? (nulltype)
        /realtype? (realtype)
        /stringtype? (stringtype)
    >>def

    
    /newtypes# <<%30 dict def % name {}returning bool
                   /numbertype {isNumberType} % int or real
                   /numberarraytype {isNumberArrayType} % int or real
                   /stringarraytype {isStringArrayType} % int or real

                   % /numberarraytype {
                   %     5 dict begin
                   %     type dup /integertype eq exch /realtype eq or
                   %     end
                   % } % int or real
               >>def

    /isNumberType{
         type dup /integertype eq exch /realtype eq or % int or real
     }def


    /isNumberArrayType{
         3 dict
         begin
         0 index type /arraytype ne{
             pop
             false
         }{
             0 index xcheck{
                 pop
                 false
             }{
                 /_v exch def
                 _v length 0 eq{
                     true
                 }{
                     true
                     _v {
                         isNumberType not{
                             pop
                             false
                             exit
                         }if
                     }forall
                 }ifelse
             }ifelse
         }ifelse
         end % anonymous
     }def

     /isStringArrayType{
         3 dict
         begin
         /_v exch def
         _v type /arraytype ne{
             false
         }{
             true
             _v {
                 type /stringtype eq not{
                     pop
                     false
                     exit
                 }if
             }forall
         }ifelse
         end % anonymous
     }def
    
     /isType{
     %     %[/anytype /nametype] (isType) checkArgs
          2 dict
          begin
         
          /_t exch def
          /_v exch def
          _v _t  isSpecificAddedType{
              true
          }{
              _v type _t eq
          }ifelse
     end % anonymous
    }def

     /isBuiltInType{
         (     /isBuiltInType{) =
         2 dict
         begin
         /_v exch def
         [
             { _v type /stringtype eq }
             { _v type /integertype eq}
             { _v type /nametype eq }
             { _v type /realtype eq}
             { _v type /booleantype eq}
             { _v type /dicttype eq}
         ]orAll
         (     /isBuiltInType{ END) =
         end % anonymous
     }def

     /isSpecificAddedType{
         2 dict 
         begin
         
        /_t exch def
        /_v exch def

        aposkribh.types#
        begin
        
        aposkribh.types# /newtypes# get _t known{
            aposkribh.types# /newtypes# get
            begin
             _v aposkribh.types# /newtypes# get _t get exec
            end % aposkribh.types# /newtypes# get
        }{
            false
        }ifelse

        end % aposkribh.types# 
        end % anonymous
    }def



    /addType{ %nametype {proc}
        [/arraytype /stringtype] (/addedType) checkArgs
        0 index xcheck not{
            (/addType: First arg needs to be executable and return boolean) /stackunderflow signalerror
        }if

        /_typeTest exch def
        /_typeName exch def


        aposkribh.types# /newtypes# known not{
            (NOOOOOOO) =
            quit
        }if

        aposkribh.types# /newtypes# get _typeName {_typeTest} put
    }bind def
    
    end % aposkribh.types#

    end  % aposkribh_test#
}if
