
% Used to debug aposkribh.libraryLoader
%  and track loading of files, libraries


/aposkribh.libraryLoader_VERBOSE where not{
    /aposkribh.libraryLoader_VERBOSE true def
}{
    pop % throw away the found dict
}ifelse

/aposkribh.COUNTER where not{
    /aposkribh.COUNTER 0 def
}{
    pop
    (globals.ps) aposkribh.START
}ifelse

/aposkribh.run{  %does 'run' on array of strings/filenames
    % count 0 eq{
    %     (/aposkribh.run: Need one arg: []string) /stackunderflow signalerror
    % }if 
    % 0 index type /arraytype ne{
    %     (/aposkribh.run: Not []stringtype on stack) /typecheck signalerror
    % }if
    %
    
    {
        dup
         aposkribh.libraryLoader_VERBOSE{
             (aposkribh.run: ) exch concatstrings =
         }if
        run
    }forall
}bind def


/aposkribh.spaces{
    count 0 eq{
        (/aposkribh.spaces: Need one arg (int)) /stackunderflow signalerror
    }if 
    0 index type /integertype ne{
        (/aposkribh.spaces: Not /integertype on stack) /typecheck signalerror
    }if

    2 dict begin
    /_n exch def
    /str () def
    0 1 _n 1 sub{
        pop
        /str str ( ) concatstrings store
    }for
    str
    end
}bind def

/aposkribh.indent{
    3 mul
    aposkribh.spaces
}bind def


/aposkribh.START{ % (filename)
    /_psfilename exch def

    aposkribh.libraryLoader_VERBOSE{
        aposkribh.COUNTER aposkribh.indent (---START: ) concatstrings   _psfilename concatstrings =
        /aposkribh.COUNTER aposkribh.COUNTER 1 add store
    }if
}def

/aposkribh.END{ % (filename)
    /_psfilename exch def
    aposkribh.libraryLoader_VERBOSE{
        /aposkribh.COUNTER aposkribh.COUNTER 1 sub store
        aposkribh.COUNTER aposkribh.indent   (---END: ) concatstrings   _psfilename concatstrings =
    }if

}def

/aposkribh.stack{ % (filename)

    count 1 lt{
        (/aposkribh.stack: Needs one arg, string filename) /stackunderflow signalerror
    }if

    0 index type /stringtype eq not{
        0 index type /dicttype eq{
            0 index aposkribh.printDictKeys
        }{
            0 index ===
        }ifelse
        stack
        (/aposkribh.stack: Arg0 must be string) /typecheck signalerror
    }if

    %
    
    (----STACK-START----------------------------------------------------------------------------------------------------------------------------------------------) =
    2 dict begin
    /filename exch def

    /c count 2 sub def
    0 1 c {
        /i exch def
        i index /v exch def
        %v ==

        v type /dicttype eq{
            ( )
            v aposkribh.printDictKeys
            % /ds (<<dict>>  )  def
            % v {
            %     pop
            %     /k exch def
            %     /ds ds k dup length string cvs concatstrings (   ) concatstrings store
            % }forall
            % ds =
        }{
            v ==
        }ifelse
    }for
    end
    (----STACK-END------------------------------------------------------------------------------------------------------------------------------------------------) =
}bind def

/aposkribh.printDictKeys{
    /ds (<<dict>>  )  def
    {
        pop
        /k exch def
        /ds ds k dup length string cvs concatstrings (   ) concatstrings store
    }forall
    ds =
}bind def

/aposkribh.libraryLoader{
    count 2 lt{
        (/aposkribh.fileLoader: Needs 2 args) /stackunderflow signalerror
    }if

    0 index type /arraytype ne{
        (/aposkribh.fileLoader: Arg0 not /arraytype) /typecheck signalerror
    }if

    1 index type /stringtype ne{
        (/aposkribh.fileLoader: Arg1 not /stringtype) /typecheck signalerror
    }if


    aposkribh.libraryLoader_VERBOSE{
        aposkribh.COUNTER aposkribh.indent 1 index (Running: ) exch concatstrings concatstrings =
    }if


    1 index /fileName exch def
    exec

    count 0 ne{
        (Stack should be empty:) =
        stack
        () =
        (FOO) aposkribh.stack
        () =
        (/aposkribh.fileLoader: stack not empty after loading file) /stackoverflow signalerror
    }if
}bind def



/aposkribh.libraryLoader2{ % libraryglobal-/nametype filename-/stringtype proc-{exec}
    /numDictsAtStart countdictstack def
    
    count 3 lt{
        (/aposkribh.fileLoader: Needs 3 args: libraryglobal-/nametype filename-/stringtype proc-{exec}) /stackunderflow signalerror
    }if

    0 index type /arraytype ne{
        (/aposkribh.fileLoader: Arg0 not /arraytype) /typecheck signalerror
    }if

    1 index type /stringtype ne{
        (/aposkribh.fileLoader: Arg1 not /stringtype) /typecheck signalerror
    }if

    2 index type /nametype ne{
        (/aposkribh.fileLoader: Arg2 not /nametype) /typecheck signalerror
    }if
    %%%%%%%%%%%%%%


    
    aposkribh.libraryLoader_VERBOSE{
        1 index aposkribh.COUNTER aposkribh.indent (+Running: ) concatstrings exch  concatstrings =
    }if
    3 1 roll

    /fileName exch def
    /libraryGlobalKey exch def
    libraryGlobalKey where not{
        aposkribh.libraryLoader_VERBOSE{
            aposkribh.COUNTER aposkribh.indent (+Loading: ) fileName concatstrings concatstrings =
        }if
        exec
    }{
        aposkribh.libraryLoader_VERBOSE{
            aposkribh.COUNTER aposkribh.indent ( #### Already loaded: ) fileName concatstrings concatstrings =
        }if
        pop % found pop dict
        pop % pop exec
    }ifelse

    count 0 ne{
        (Stack should be empty:) =
        () =
        (BAR) aposkribh.stack
        () =
        (/aposkribh.fileLoader2: stack not empty after loading file) /stackoverflow signalerror
    }if

    numDictsAtStart countdictstack ne{
        (/aposkribh.fileLoader2: Number of dictionaries on the dictstack should not change when loading a library: ) fileName concatstrings /dictstackoverflow signalerror
    }if

    }bind def




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/aposkribh.GLOBALS
(globals.ps)
{

    /aposkribh.VERBOSE false def
    /aposkribh.VERBOSE_TEST false def

        /aposkribh.TRACE false def
        /aposkribh.TRACE_COUNT 0 def
        /aposkribh.CHECK_ARGS true def

        /aposkribh.ASSERTIONS_ON false def
        /aposkribh.ASSERTIONS_TRACE_ON false def

        /aposkribh.TEST_SHOW_PASSES false def

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % DO NOT EDIT BELOW THIS LINE%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        /aposkribh.GLOBALS true store

        /MaxInt 2147483647 def
        /MaxIntReal 2147483647.0 def
}aposkribh.libraryLoader2

(globals.ps) aposkribh.END

