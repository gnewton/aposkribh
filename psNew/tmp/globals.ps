
/aposkribh.libraryLoader_VERBOSE true def % Used to debug aposkribh.libraryLoader

/aposkribh.stack{ % (filename)
    count 1 lt{
        (/aposkribh.stack: Needs one arg, string filename) /stackunderflow signalerror
    }if

    0 index type /stringtype eq not{
        0 index type /dicttype eq{
            0 index aposkribh.printDictKeys
        }{
            0 index ===
        }ifelse
        
        (/aposkribh.stack: Arg0 must be string) /typecheck signalerror
    }if

    %
    
    (----STACK-START----------------------------------------------------------------------------------------------------------------------------------------------) =
    2 dict begin
    /filename exch def

    /c count 2 sub def
    0 1 c {
        /i exch def
        i index /v exch def
        %v ==

        v type /dicttype eq{
            ( )
            v aposkribh.printDictKeys
            % /ds (<<dict>>  )  def
            % v {
            %     pop
            %     /k exch def
            %     /ds ds k dup length string cvs concatstrings (   ) concatstrings store
            % }forall
            % ds =
        }{
            v ==
        }ifelse
    }for
    end
    (----STACK-END------------------------------------------------------------------------------------------------------------------------------------------------) =
}bind def

/aposkribh.printDictKeys{
    /ds (<<dict>>  )  def
    {
        pop
        /k exch def
        /ds ds k dup length string cvs concatstrings (   ) concatstrings store
    }forall
    ds =
}bind def

/aposkribh.libraryLoader{

    count 2 lt{
        (/aposkribh.fileLoader: Needs 2 args) /stackunderflow signalerror
    }if

    0 index type /arraytype ne{
        (/aposkribh.fileLoader: Arg0 not /arraytype) /typecheck signalerror
    }if

    1 index type /stringtype ne{
        (/aposkribh.fileLoader: Arg1 not /stringtype) /typecheck signalerror
    }if


    aposkribh.libraryLoader_VERBOSE{
        1 index (Running: ) exch  concatstrings =
    }if


    1 index /fileName exch def
    exec

    count 0 ne{
        (Stack should be empty:) =
        stack
        () =
        aposkribh.stack
        () =
        (/aposkribh.fileLoader: stack not empty after loading file) /typecheck signalerror
    }if
}bind def




(globals.ps)
{
    /aposkribh.GLOBALS where not{
        (   Loading: ) exch concatstrings =
        /aposkribh.VERBOSE false def
        /aposkribh.VERBOSE_TEST false def

        /aposkribh.TRACE false def
        /aposkribh.TRACE_COUNT 0 def
        /aposkribh.CHECK_ARGS true def

        /aposkribh.ASSERTIONS_ON false def
        /aposkribh.ASSERTIONS_TRACE_ON false def

        /aposkribh.TEST_SHOW_PASSES false def

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % DO NOT EDIT BELOW THIS LINE%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        /aposkribh.GLOBALS true store

        /MaxInt 2147483647 def
        /MaxIntReal 2147483647.0 def

    }{
        pop
        pop % get rid of found dict 
    }ifelse

}aposkribh.libraryLoader

