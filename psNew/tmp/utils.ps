
(globals.ps) run

(primatives.ps) run
(types.ps) run

/aposkribh.utils#
(utils.ps)
{
    /aposkribh.utils# 50 dict def

    aposkribh.utils# begin

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    /switch{
        (SWITCH start) =
        % Needs 3 args:
        % 2:any type: value to be switched on
        % 1:dict: keys are the match; values are the return value
        % 0: executable array {} in []: default fall through return value
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        [/arraytype /dicttype /anytype] (/switch)  checkArgs

        /_default exch def
        /_caseDict# exch def    

        % value being checked can be anything
        /_v exch def

        % body
        _caseDict# _v known not{
            _default 0 get (/switch: default) execClean
        }{
            _caseDict# _v get (/switch: case) execClean
        }ifelse

    }bind def

    /nswitch{ % Array of args; if empty does all; otherwise walks through, matches and runs
        % Needs 3 args:
        % 2:[any type]: value to be switched on
        % 1:dict: keys are the match; values are the return value
        % 0: executable array {} in []: default fall through return value
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        [/arraytype /dicttype /arraytype] (/nswitch) checkArgs

        (HELLO) =
        

        /_default exch def
        /_caseDict# exch def    
        
        % array of values being checked can be anything
        /_a exch def
        
        % body
        (======================================================) =
        _a{
            () =
            (BODY) =
            /v exch def
            v _caseDict# _default switch =
            (GGGG) =
        }forall
        (END nswitch)
    }bind def

    /a2s{ % anything to string
        (a2s---------) =
        count 0 eq{
            mark (/a2s: needs one argument) /undefined signalerror
        }if
        2 dict begin
        /v exch def

        v type n2s
        <<
            (stringtype)  {v}
            (nametype)  {v n2s}
            (integertype) {v i2s}
            (booleantype) {v b2s}
            (realtype)    {v r2s}
            (dicttype)    {(<<dict>>) }
            (arraytype)   {(arraytype)}
        >>
        [{(Unknown)}]
        switch


        end
    }bind def


    /dictMatchesTemplate{ % templateDict testDict % testDict must have all the keys as are in templateDict
        count 2 lt{
            (/dictMatchesTemplate: Needs 2 args) /stackunderflow signalerror
        }if
        0 index type /dicttype ne{
            (/dictMatchesTemplate: Arg0 not /dicttype) /typecheck signalerror
        }if
        1 index type /dicttype ne{
            (/dictMatchesTemplate: Arg1 not /dicttype) /typecheck signalerror
        }if
        %

        2 dict begin
        /_t# exch def
        /_d# exch def

        _t#{
            pop
            /k exch def
            k _d# exch known not{
                (/dictMatchesTemplate: key missing: [) k dup length string cvs concatstrings (] ) concatstrings     /undefined signalerror
            }if
        }forall
        end
    }bind def

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end % aposkribh.util

}aposkribh.libraryLoader2
