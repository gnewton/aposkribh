(primatives.ps) run

/aposkribh_2da# where not{
    /aposkribh_2da# 50 dict def

    aposkribh_2da# begin

    /TwoDArrayTemplate# 50 dict def

    TwoDArrayTemplate# begin
    % local variables
    /a null def
    /nx null def % # x values
    /ny null def % # y values

    % procedures
    /getCell{
        [/integertype /integertype] (getCell) checkArgs
        10 dict begin
        /_j exch def
        /_i exch def
        (getCell) _i 0 nx checkRange
%        (getCell) _j 0 ny checkRange
        
        _i nx gt
        _j ny gt
        or
        _i 0 lt
        _j 0 lt
        or
        or{
            (BAD) =
            (getCell: i or j too large or <0) /rangecheck signalerror
        }if
        a _i get _j get 
        end %
    } def % gets value at i,j

    /setCell{
        [/integertype /integertype /any'] (setCell) checkArgs
        (getCell NOT IMPLEMENTED) =
    } def % puts {} at i.j
    end
    

    /new2da{ % int int -> dict (#tda)
        [/integertype /integertype] (new2da) checkArgs
        10 dict begin
        /_h exch def
        /_w exch def
        % TODO check variables

        
        aposkribh_2da# begin

        10 dict begin % Make tda# local, not in aposkribh_2da# 
        /tda# 50 dict def
        TwoDArrayTemplate# tda# copy

        tda# begin
        /nx _w store
        /ny _h store
        /a _h array store

        0 1 a length 1 sub{
            a exch _w array put
        }for

        end % tda#
        end % anonymous
        end % aposkribh_2da#
        end % anonymous
        % tda# left on stgack
    }def

    end %aposkribh_2da# begin
}if %

