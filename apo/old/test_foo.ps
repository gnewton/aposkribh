
%!PS-Adobe-2.0 
%%
%%Creator:Glen Newton
%%Copyright: 2025 Glen Newton
%%%%%%%%%%%%%%

(aposkribh.ps) run
(START test_foo.ps) =

aposkribh# begin
(test.ps) run

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%(mmmm) (testProc) [/stringtype] util.args.Required


(fuzz.ps) run


50{
    [/stringtype /realtype]      fuzz.MakeBadArgs
    
    [/stringtype /realtype]      fuzz.MakeBadArgs
}repeat




2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] util.random.ArraySizeNOfThese
2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] util.random.ArraySizeNOfThese
2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] util.random.ArraySizeNOfThese
2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] util.random.ArraySizeNOfThese

2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] <</stringtype true>> util.random.ArraySizeNOfTheseButExcludeThese
2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] <</stringtype true>> util.random.ArraySizeNOfTheseButExcludeThese
2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] <</stringtype true>> util.random.ArraySizeNOfTheseButExcludeThese
2 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] <</stringtype true>> util.random.ArraySizeNOfTheseButExcludeThese
10 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] <</stringtype true>> util.random.ArraySizeNOfTheseButExcludeThese


1 1 100 {
    /i exch def
    3 [/stringtype /arraytype /dicttype /nulltype /realtype /integertype] <</dicttype true /nulltype true>> util.random.ArraySizeNOfTheseButExcludeThese
}for

clear



%% add#
/add2# proc.New def
 % add2# /Args
 % [
 %     [
 %         [/integertype /integertype] [/integertype]
 %         [/floattype /integertype] [/floattype]
 %         [/integertype /floattype] [/floattype]
 %         [/floatype /floattype] [/floattype]
 %     ]
 % ] put

 % add2# /Proc  {add} put

% clear
% 4 45 add2# proc.R =

clear

[
    [ [/integertype /integertype] [/integertype] ]
    [ [/realtype /integertype]   [/realtype]   ]
    [ [/integertype /realtype]   [/realtype]   ]
    [ [/realype /realtype]      [/realtype]   ]

]
{add}
add2# /SetProcAndArgs util.dict.Exec


4 45 add2# proc.R =
4.3 45 add2# proc.R =
%add2# proc.R =
% add2# proc.R =
(EEEEEEEEEEEEE) =


(-------------------------------) log.debug.Print


(FIRST) log.debug.Print
(add)
( (M) 5 )
/typecheck
test.simple.ShouldFail


(*********************************) log.debug.Print


(add)
()
/stackunderflow
test.simple.ShouldFail


(add)
[
    ( (MM) 5 )
]
/typecheck
test.simple.ShouldFailN



(add)
[
    (3)
    ()
]
/stackunderflow
test.simple.ShouldFailN





(proc.Registry#) =
proc.Registry# ===
% END


() =
() =

%%%%%%%%%
(/foo)
<<
    (a) { (A) = }
    (B) { (B) = }
    32  { (32) = }
    /foo  { (/foo) = }
>>
{ (default) = }
util.Switch



%%%%%%%%%
(m)
<<
    (MMM) {(<<>>) = }
    (a) { (A) = }

    (B) { (B) = }
    32  { (32) = }
    /foo  { (/foo) = }
>>
{ (default) = }
util.Switch


(****************************************) =

(proc.RedefineWrapper) =

* ===

* /* eq =


clear
%util.Switch




 
% 10 dict begin
% /add2{
%  [
%      [ [/integertype /integertype] [/integertype] ]
%      [ [/realtype /integertype]   [/realtype]   ]
%      [ [/integertype /realtype]   [/realtype]   ]
%      [ [/realype /realtype]      [/realtype]   ]
%  ] 
% %  {sub}
%  {add2} 
%   aposkribh# begin
%   proc.RedefineWrapper
%   end
% }bind def


% clear
% (ZZZZZZZZZZZZZZZZZZZZZZZ) =
% 1.2 2 add2 =
%end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
(END test_foo.ps) =


/ArgsResults
<<
    0 <<
          /Args [/stringtype /arraytype]
          /Results [/arratype]
      >>
    1 <<
          /Args [/arraytype]
          /Results [/realtype]
      >>

    /Something { }
>>def

%ArgsResults /self ArgsResults put

ArgsResults
{
    /v exch def
    /k exch def
    /v 
    ===
}forall

/NewNew{
    /tmp <<
             /Tmp (ME!)
             /IntKey 34

             /Run{
                 self ==
                 IntKey =
                 /IntKey 56 store
             }def
         >>def

    /X tmp def
    X /self tmp put
    X
}def



(M) =



() =

NewNew util.dict.Print

(9999999999) =

/Z NewNew def

Z begin
Run
%Run
end


Z util.dict.Print




 end % aposkribh# 
