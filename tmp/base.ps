
% From: https://riptutorial.com/postscript/example/21484/signalling--throwing--an-error
/.error where {pop /signalerror /.error load def} if
% End From %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/github.com.gnewton.aposkribh.base 100 dict def

github.com.gnewton.aposkribh.base begin
% Assumes you are loading not more than 100 files; change if this is not the case
/_fileTrackingArraySize 100 def

% File load tracking START %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/_fileTrack true def

/_fileTrackingArray _fileTrackingArraySize array def

/_fileTrackingArrayIndex -1 def


%% /concatstrings derived from https://stackoverflow.com/questions/12378904/postscript-concatenate-two-strings
/concatstrings % (a) (b) -> (ab)  
{
    count 2 lt{
        (Error: base.ps/concatstrings: needs two args) =
        $error /errorname /stackunderflow put
        stop
    }if

    0 index type /stringtype ne{
        (Error: base.ps/concatstrings: first arg not string) =
        $error /errorname /typecheck put
        stop
    }if

    1 index type /stringtype ne{
        (Fatal Error: base.ps/concatstrings: second arg not string) =
        $error /errorname /typecheck put
        stop
    }if
    
    exch dup length    
    2 index length add string    
    dup dup 4 2 roll copy length
    4 -1 roll putinterval
} bind def



/_pushCurrentFile{ % FileTracking: Pushes filename onto tracking stack
    count 1 lt{
        (Error: base.ps:_pushCurrentFile: Needs at least one string argument) =
        $error /errorname (MMMZZ) put
        stop
    }if

    2 dict begin
    /filename exch def
    filename type /stringtype eq not{
        (Error: base.ps:_pushCurrentFile: String argument requried) =
        $error /errorname /typecheck put
        stop
    }if

    % body %%%%%%%%%%%%%%%%%%%%%%%%
    _fileTrackingArray _fileTrackingArrayIndex 1 add filename put
    end
    /_fileTrackingArrayIndex  _fileTrackingArrayIndex 1 add store
}def

/_popCurrentFile{ % FileTracking: Pops filename off tracking stack
    _fileTrackingArrayIndex 0 lt{
        (Error: base.ps:_popCurrentFile: Popping file below 0. Likely you many _aposkribh_fileEnd's) =
        stop
    }if
    /_fileTrackingArrayIndex  _fileTrackingArrayIndex 1 sub store
}def


% _fileTrack{
%     (% FILE START: base.ps) =
% }if


/_Debug true def

/dbg{
    count 2 lt{
        (ERROR: needs at least 2 args) =
        quit
    }if

    2 dict begin
    /proc exch def
    /procName exch def
    github.com.gnewton.aposkribh.base begin
    _Debug{
        (Trace: Start: ) procName concatstrings =
    }if
    proc
    _Debug{
        (Trace: End:   ) procName concatstrings =
    }if
    end % github.com.gnewton.aposkribh.base 
    end % local
}def

/arun{
    2 dict begin
    /filename exch def
    (% Loading: ) filename concatstrings =
    filename run
    (% Done loading: ) filename concatstrings =
    count 0 ne{
        (! Fatal error: stack is not empty) =
        stack
        quit
    }if
    end
}bind def



/spaceCache# 10 dict def
/makeSpaces{ % n -> string with n blank spaces; cached in dict
    count 1 lt{
        (Error: needs at least one int argument)=
        $error /errorname /stackunderflow put
        stop
    }if
    0 index type /integertype ne{
        (Error: argument needs to be an integer) =
        $error /errorname /typecheck put
        stop
    }if

    % body
    8 dict begin
    /n exch def
    n 0 lt{
        (Error: are cannot be < 0) =
        $error /errorname /rangecheck put
        stop
    }if
    /s () def
    spaceCache# n known{ % cache hit
        spaceCache# n get /s exch def
    }
    {% Cache miss
        n {
            s ( ) concatstrings /s exch store
        }repeat
        spaceCache# n s put
    }ifelse
    
    s %leave on stack
    end
}bind def



/fileStart{
    count 1 lt{
        (Error: base.ps: fileStart: needs one arg) =
        $error /errorname /stackunderflow put
        stop
    }if

    0 index type /stringtype ne{
        (Error: base.ps: fileStart: arg not string) =
        $error /errorname /typecheck put
        stop
    }if
    
    2 dict begin
    /filename exch def
    
    % body %%%%%%%%%%%%%%%%%%

    github.com.gnewton.aposkribh.base begin
    filename _pushCurrentFile
    _fileTrack{
        %(% FILE START: ) filename  concatstrings =
        (%) _fileTrackingArrayIndex makeSpaces concatstrings ( FILE START: ) concatstrings filename  concatstrings =
    }if
    end % github.com.gnewton.aposkribh.base

    end % local
}def

/fileEnd{
    count 1 lt{
        (Error: base.ps: needs one arg) =
        $error /errorname /stackunderflow put
        stop
    }if

    0 index type /stringtype ne{
        (Error: base.ps: fileStart: arg not string) =
        $error /errorname /typecheck put
        stop
    }if

    2 dict begin
    /filename exch def
    
    % body

    github.com.gnewton.aposkribh.base begin
    _popCurrentFile
    _fileTrack{
        () =
        (%) _fileTrackingArrayIndex 1 add makeSpaces concatstrings ( FILE END: ) concatstrings filename  concatstrings =
    }if
    end % github.com.gnewton.aposkribh.base

    end
}def


/currentFile{
    github.com.gnewton.aposkribh.base begin
    _fileTrackingArray _fileTrackingArrayIndex get
    end
} def

% Look into systemdict for value; if not found, use supplied default value; value left on stack
/envDefault{ % KEY DEFAULTVALUE
    count 2 lt{
        (Fatal Error: base.ps/envDefault: needs two args) =
        $error /errorname /stackunderflow put
        stop
    }if
    2 dict begin
    /defValue exch def
    /key exch def
    
    systemdict key known{
        systemdict key get
    }{
        defValue
    }ifelse
    end
}def

/concat{ % arrayof int, string, real, boolean, nametype;
    % Space as separator
    count 0 eq{
        (Error: base.ps/concatWithSeparator: Needs 1 arg) =
        $error /errorname /stackunderflow put
        stop
    }if
    0 index type /arraytype ne{
        (Error: base.ps/concat: arg not array) =
        $error /errorname /typecheck put
        stop
    }if
    ( ) concatWithSeparator
}def

/concatWithSeparator{ % array, string separator[1 2 3] (|)
    count 2 lt{
        (Error: base.ps/concatWithSeparator: Needs 2 args) =
        $error /errorname /stackunderflow put
        stop
    }if

    0 index type /stringtype ne{
        (Error: base.ps/concatWithSeparator: First arg not string) =
        $error /errorname /typecheck put
        stop
    }if
    1 index type /arraytype ne{
        (Error: base.ps/concatWithSeparator: Second arg not array) =
        $error /errorname /typecheck put
        stop
    }if

    % body %%%%%%%%%
    5 dict begin
    /separator exch def
    /aray exch def

    % If array is empty, return empty string
    /results () def

    aray length 0 gt{
        /first true def
        aray{
            /v exch def
            first {
                /first false store
            }{
                /results results separator concatstrings store
            }ifelse

            v type /stringtype eq{
                /results results v concatstrings store
            }{
                /results results v toString concatstrings store
            }ifelse
        }forall
    }if
    results
    end
}def

/toString{ % converts int, real, bool, /nametype, string to string
    count 1 lt{
        (Error: base.ps/toString: Needs 1 arg) =
        $error /errorname /stackunderflow put
        stop
    }if
        
    1 dict begin
    /v exch def

    % Ints, reals, /nametypes
    v type /integertype eq   v type /realtype eq   v type /nametype eq   or or{
        v 64 string cvs
    }{
        v type /booleantype eq{
            v true eq{
                (true)
            }{
                (false)
            }ifelse
        }{
            v type /arraytype eq{
                v concat
            }{
                v type /stringtype eq{
                    v
                }{
                    v type /nulltype eq{
                        (null)
                    }{
                        v type /marktype eq{
                            ([)
                        }{
                            v type /fonttype eq{
                                (-font-) =
                            }{
                                v type /dicttype eq{
                                    (<<dict TODO>>)
                                }{
                                    (Error: base.ps/toString: unsupported type: /) v type 24 string cvs concatstrings =
                                    $error /errorname /typecheck put
                                    stop
                                }ifelse
                            }ifelse
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
    }ifelse
    end
}def

/contains{ % checks to see if item in contained in array; array v;
    count 2 lt{
        (Error: base.ps/contains: Needs 2 args) =
        $error /errorname /stackunderflow put
        stop
    }if

    1 index type /arraytype ne{
        (Error: base.ps/contains: Second arg not array) =
        $error /errorname /typecheck put
        stop
    }if

    /results false def

    1 index length 0 gt{
        (m)=
        2 dict begin
        /v exch def
        /aray exch def
        
        aray{
            v eq{
                /results true store
                exit
            }if
        }forall
        end
    }if
    
    results
}bind def

/sameArray{
    /result true def

    0 index type /arraytype ne{
        (Error: base.ps/sameArray: First arg not array) =
        $error /errorname /typecheck put
        stop
    }if
    1 index type /arraytype ne{
        (Error: base.ps/sameArray: Second arg not array) =
        $error /errorname /typecheck put
        stop
    }if

    2 dict begin
    /a1 exch def
    /a2 exch def
    
    a1 length a2 length ne{
        /result false store
    }{
        0 1 a1 length 1 sub{
            /i exch def
            a1 i get  a2 i get ne{
                /result false store
                exit
            }if
        }for
    }ifelse
    end
    
    result
}bind def


/assertMinStackSize{ % proc num
    count 2 lt{
        (Error: assertMinStackSize: Needs at least 2 args) =
        $error /errorname /stackunderflow put
        quit
    }if
    
    0 index type /integertype ne{
        (Error: assertMinStackSize: First arg needs to be integertype) =
        $error /errorname /typedef put
        quit
    }if

    1 index type /stringtype ne{
        (Error: assertMinStackSize: Second arg needs to be stringtype)  =
        $error /errorname /typedef put
        quit
    }if

    % body
    /n exch def
    /procName exch def
    count n lt{
         (Error: assertMinStackSize: Stack arguments missing from procedure: ) procName concatstrings =
        $error /errorname /stackunderflow put
        stop
     }if
}bind def


end % github.com.gnewton.aposkribh.base begin

