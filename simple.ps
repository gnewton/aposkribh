
(simple.ps) _aposkribh_fileStart


/github.com.gnewton.aposkribh.simple 100 dict def

github.com.gnewton.aposkribh.simple begin

/Test true def
/TestDebug false def
/TestStopOnFail true def


/TestSuppressErrorMessages false def

/TestSuppressTestMessages false def
/TestSuppressTestErrorMessages false def

/initTesting{
    /TestSuppressErrorMessages true def
    /TestSuppressTestMessages false def
    /TestSuppressTestErrorMessages false def
    clear
}def


/debugAssert{
    pop
}def

/debugAssertOn{
    /debugAssert{
        =
    }def
}def

/debugAssertOff{
    /debugAssert{
        pop
    }def
}def



/AssertPass{ % proc testName
    () =
    10 dict begin
    /testName exch def  % Name of test being run
    /proc exch def % Procedure to test
    testName isString? not{
        (/AssertPass: internal error: testName must be a string) testErrOut
        testName testErrOut
        quit
    }if

    proc isProc? not{
        (Error: github.com.gnewton.aposkribh.simpletest/AssertPass: proc is not executable. Fix your test.) testErrOut
        testName testErrOut
        quit
    }if

    % ---body -----------------------
    github.com.gnewton.aposkribh.base.internal begin
    (Testing: AssertFail: /) proc 128 string cvs _concatstrings =
    end
    testName testMsgOut
    {
        proc load exec
    }
    stopped 
    { % Errors: not expected
        (FAIL /AssertPass) testMsgOut
        (/AssertPass 2) =
        $error begin
        newerror =
        errorname =
        command =
        errorinfo ==
        ostack ==
        %estack ===
        
        dstack ==
        (End $error) =
        end
        TestStopOnFail
        {
            quit
        }if
    }if % stopped
    
    % No errors: expected
    (PASS /AssertPass) testMsgOut
  
    clear
    end
}def

/AssertFail{
    () =
    10 dict begin
    /testName exch def  % Name of test being run
    /proc exch def % Procedure to test
    
    testName isString? not{
        (/AssertFail: internal error: testName must be a string) testErrOut
        testName testErrOut    
        quit
    }if
    
    proc isProc? not{
        (Error: github.com.gnewton.aposkribh.simpletest/AssertFail: proc is not executable. Fix this test.) testErrOut
        testName testErrOut
        quit
    }if

    github.com.gnewton.aposkribh.base.internal begin
    (Testing: AssertFail: /) proc 128 string cvs _concatstrings =
    end

    testName testMsgOut    
    % ---body -----------------------
    {
        proc load exec
    }
    stopped not{ % Wrong: Run with no errors: not expected
        (FAIL /AssertFail) testMsgOut
        TestStopOnFail{
            testName testMsgOut
            quit
        }
    }if

    % Failed: what is expected
    (PASS /AssertFail) testMsgOut

    clear
    end
 }def



/isProc?{
    10 dict begin
    {
        /p exch def
        p load xcheck{
            true
        }{
            false % Never get here...
            (Internal Error: isProc? : Should never get here!) =
            quit
        }ifelse
    }stopped{ % if not executable, load will fail
        false
    }if
    end
}def


/testErrOut{
    TestSuppressTestErrorMessages not{
        =
    }
    {
        pop
    }ifelse
}def

/testMsgOut{
    TestSuppressTestMessages not{
        =
    }
    {
        pop
    }ifelse
}def

/assertMinStackSize{ % proc num
     1 add count ge{
         (assertMinStackSize: Stack arguments missing) =
         =
         clear
         stop
     }if
     pop % proc
}bind def

/assertFalse{
    {
        (/assertFalse FAIL) =
        stop
    }if
}def

/assertTrue{
    not{
        (/assertTrue FAIL) =
        stop
    }if
}def

end % github.com.gnewton.aposkribh.simpletest



/github.com.gnewton.aposkribh.simpletest.private 100 dict def

github.com.gnewton.aposkribh.simpletest.private begin




end % github.com.gnewton.aposkribh.simpletest.private 

(simple.ps) _aposkribh_fileEnd
