(base.ps) run

(util_test.ps) _aposkribh_fileStart

(util.ps) run
(simple.ps) run
(error.ps) run

github.com.gnewton.aposkribh.simple# begin
github.com.gnewton.aposkribh.error begin
github.com.gnewton.aposkribh.util begin

false /assertFalse (false: should work) AssertPass
true /assertFalse (true: should not work) AssertFail

true /assertTrue (true: should work) AssertPass
false /assertTrue (false: should not work) AssertFail


(lkjh) [54 22 55]  /arrayAppendTo (Goo args) AssertPass

/baoTest{
    /ba newAOA def
    0 1 2300{
        ba appendToAOA
    }for
}def

/baoTest (ba append to test) AssertPass


 [10 [3 4 5]] isAOA? assertTrue



 [10] isAOA? assertFalse


% (Should pass) =
% {
%     false assertFalse
% }stopped{
%     (FAIL - stopped) =
% }{
%     (PASS) =
% }ifelse

% (Should fail) =
% {
%     true assertFalse
% }stopped{
%     (PASS) =
% }{
%     (FAIL  - not stopped) =
% }ifelse


% (Should pass) =
% {
%     true assertTrue
% }stopped{
%     (FAIL - stopped) =
% }{
%     (PASS) =
% }ifelse

% (Should pass) =
% {
%     false assertTrue
% }stopped{
%     (PASS  - stopped) =
% }{
%     (FAIL) =
% }ifelse



 false /assertTrue (False should fail) AssertFail
% true /assertTrue (FOO) AssertPass


true /assertFalse (true should fail) AssertFail

false assertFalse
{
    false assertFalse
}stopped{
    (BADDDDDD) =
    quit
}if


false /assertFalse (false should pass) AssertPass






10 isAOA? /assertFalse (foog) AssertPass
10 isAOA? /assertTrue (foog2) AssertFail


(777777777777777) =
github.com.gnewton.aposkribh.simple# begin
github.com.gnewton.aposkribh.simple# /AssertPass_Coverage# get{
    (---------------) =
    /testsAOA exch def
    /key exch def
    testsAOA AOA2string =
}forall
end % github.com.gnewton.aposkribh.simple#


end
end
end

(util_test.ps) _aposkribh_fileEnd
